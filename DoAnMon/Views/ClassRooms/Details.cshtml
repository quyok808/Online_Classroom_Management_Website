@using DoAnMon.IdentityCudtomUser
@using Microsoft.AspNetCore.Identity
@inject ICheckNop CheckNop

@inject UserManager<CustomUser> _userManager
@inject IUserStore<CustomUser> _userStore
@using static DoAnMon.Models.ClassroomViewModel
@model ClassRoomViewModel

@{
	string tenlop = Model.ClassRoom.Name;
	ViewData["Title"] = tenlop;
	Layout = "~/Views/Shared/_Layout.cshtml";
	var user = await _userManager.GetUserAsync(User);
}
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js"></script>

<style>
	body {
		font-family: Arial, sans-serif;
		margin: 0;
		padding: 0;
		box-sizing: border-box;
	}

	.cover-photo {
		width: 100%;
		height: 300px;
		background-image: url('path/to/your/cover/photo.jpg');
		background-size: cover;
		background-position: center;
	}

	.class-info {
		padding: 20px;
		text-align: center;
	}

		.class-info h1 {
			font-size: 30px;
			margin-bottom: 10px;
			font-weight: bold;
			text-transform: uppercase;
		}

		.class-info p {
			font-size: 16px;
			margin-bottom: 15px;
		}

	/* Menu dropdown Thêm thành viên */
	.dropdown {
		position: relative;
		display: inline-block;
	}

	.dropdown-content {
		display: none;
		position: absolute;
		background-color: #f9f9f9;
		min-width: 190px;
		box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);
		z-index: 1;
		text-align: start;
	}

		.dropdown-content a, .dropdown-content p {
			color: black;
			padding: 12px 16px;
			text-decoration: none;
			display: block;
		}

			.dropdown-content a:hover {
				background-color: #f1f1f1;
			}

	.dropdown:hover .dropdown-content {
		display: block;
	}

	/* ================================= */

	.tabs {
		overflow: hidden;
		border-bottom: 1px solid #ccc;
	}

	.tab {
		float: left;
		cursor: pointer;
		padding: 14px 16px;
		transition: background-color 0.3s;
	}

		.tab:hover {
			background-color: #ddd;
		}

		.tab.active {
			background-color: #ccc;
		}

	.tabcontent {
		display: none;
		padding: 20px;
		clear: both;
	}

	.posts {
		padding-top: 20px;
	}

	.post {
		border-bottom: 1px solid #ccc;
		padding: 20px 0;
		margin-bottom: 20px;
	}

		.post img {
			max-width: 100%;
			height: auto;
			margin-bottom: 10px;
		}

		.post h2 {
			font-size: 20px;
			margin-bottom: 10px;
		}

		.post p {
			font-size: 16px;
			margin-bottom: 10px;
		}

		.post .author {
			font-style: italic;
			color: #666;
		}

	/* THÔNG TIN GI?NG VIÊN */
	.teacher-info {
		background-color: #f9f9f9;
		padding: 20px;
		border-radius: 10px;
		box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
		/* Thêm bóng d? */
	}

	.teacher-details {
		display: flex;
		align-items: center;
	}

	.teacher-image {
		width: 100px;
		height: 100px;
		border-radius: 50%;
		margin-right: 20px;
		box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
		/* Thêm bóng d? */
		object-fit: cover;
	}

	.teacher-text {
		flex: 1;
	}

		.teacher-text p {
			margin-bottom: 10px;
		}

			.teacher-text p strong {
				font-weight: bold;
				color: #e72323;
			}

	/* POST BÀI GI?NG */
	.post {
		margin-bottom: 20px;
		padding: 20px;
		background-color: #f9f9f9;
		border-radius: 10px;
		box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
	}

		.post h2 {
			font-size: 24px;
			margin-bottom: 10px;
			text-align: center;
		}

	.pdf-container {
		width: 100%;
		height: 600px;
		overflow: auto;
	}

		.pdf-container object {
			width: 100%;
			height: 100%;
		}

		.pdf-container embed {
			width: 100%;
			height: 100%;
		}

	/* BÀI T?P */
	.assignment {
		background-color: #f9f9f9;
		padding: 20px;
		border-radius: 5px;
		margin-bottom: 20px;
		display: flex;
		justify-content: space-between;
		align-items: center;
		border: 1px solid #ccc; /* Thêm vi?n */
	}

	.assignment-content {
		flex-grow: 1;
		margin-right: 20px;
	}

	.assignment h3 {
		margin-top: 0;
		margin-bottom: 10px;
	}

	.assignment-description {
		margin-bottom: 20px;
	}

	.file-input-wrapper {
		margin-right: 20px;
	}

	.file-label {
		font-weight: bold;
	}

	.file-input {
		display: none;
	}

	.btn {
		padding: 10px 20px;
		color: #fff;
		border: none;
		border-radius: 5px;
		cursor: pointer;
		transition: background-color 0.3s;
	}

	.custom-button {
		background-color: #007bff;
	}

	.btn:hover {
		background-color: #0056b3;
	}

	/* UPLOAD BAITAP */
	.upload-form {
		display: flex;
		flex-direction: column;
		align-items: center;
		margin-bottom: 20px;
	}

	.file-label {
		margin-bottom: 10px;
	}

	.file-input-wrapper {
		width: 100%;
	}

	.file-input {
		width: 100%;
		padding: 10px;
		border: 1px solid #ccc;
		border-radius: 5px;
		background-color: #f9f9f9;
		transition: border-color 0.3s;
		margin: 10px;
	}

		.file-input:focus {
			border-color: #007bff;
			outline: none;
		}

	.btn {
		width: 100%;
		max-width: 200px; /* Ð?m b?o nút không quá r?ng */
	}

	/*======================B?ng di?m======================*/
	.container-bangdiem {
		overflow-x: scroll;
	}

	/* Style for the first column */
	.first-column th:first-child,
	.first-column td:first-child {
		width: 200px; /* Fixed width for the first column */
		white-space: nowrap; /* Prevent wrapping content */
	}

	/* General table styling */
	#user {
		font-family: Arial, Helvetica, sans-serif;
		border-collapse: collapse;
		width: 100%;
		overflow-x: auto; /* Horizontal scroll for small screens */
	}

		#user td,
		#user th {
			border: 1px solid #ddd;
			padding: 8px;
		}

		#user tr:nth-child(even) {
			background-color: #f2f2f2;
		}

		#user tr:hover {
			background-color: #ddd;
		}

		#user th {
			padding-top: 12px;
			padding-bottom: 12px;
			text-align: left;
			background-color: #04AA6D;
			color: white;
		}

		/* T?o icon copy */
	/* T?o button change background */
	.custom-file-upload {
		display: inline-block;
		padding: 10px 20px;
		cursor: pointer;
		background-color: #ffffff; /* Màu n?n */
		color: black; /* Màu ch? */
		border-radius: 5px; /* Bo tròn góc */
		font-size: 16px;
		font-weight: bold;
		transition: background-color 0.3s ease; /* Hi?u ?ng chuy?n d?i màu */
	}

		.custom-file-upload:hover {
			background-color: #E3E1D9; /* Màu n?n khi hover */
		}

		.custom-file-upload:active {
			background-color: #B4B4B8; /* Màu n?n khi click */
		}

	/* Bright Modal */
	.modal {
		display: none;
		position: fixed;
		z-index: 1000;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		width: 100%;
		max-width: 400px;
		background-color: white; /* Bright Modal */
		border-radius: 8px; /* Rounded corners */
		padding: 20px;
	}

	.modal-content {
		padding: 20px;
	}

	.modal-header, .modal-body {
		padding-bottom: 15px;
	}

	.modal-title {
		margin-bottom: 10px;
	}

	.text-center {
		text-align: center;
	}

	progress {
		width: 100%;
		height: 20px;
	}

	/* Dark Background */
	.modal-backdrop {
		display: none;
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.7); /* Dark semi-transparent background */
		z-index: 999; /* Below the modal */
	}

		.modal.show, .modal-backdrop.show {
			display: block;
		}

		/*LOADER*/
.loader {
  width: 100%;
  height: 10px;
  background: repeating-linear-gradient(-45deg, #766DF4 0 20px,#0000 0 40px) left/200% 100%;
  animation: i3 2s infinite linear;
  border-radius: 10px;
  border: 1px solid #766DF4;
}

@@keyframes i3 {
  100% {
    background-position: right
  }
}

	.d-flex {
		display: flex;
	}

	.gap-2 {
		gap: 10px;
	}

	.card {
		border: 1px solid #ccc;
		padding: 15px;
		border-radius: 10px;
		margin-bottom: 15px;
		box-shadow: 0 2px 5px rgba(0,0,0,0.1);
		position: relative;
		min-width: 215px;
		margin-top: 15px;
		margin-right: 15pc;
	}

	.card-title {
		font-size: 1.25rem;
		font-weight: bold;
	}

	.card-text {
		font-size: 1rem;
	}

	.delete-btn {
		position: absolute; /* Position it absolutely within the card */
		top: 10px; /* Adjust as needed */
		right: 5px; /* Adjust as needed */
		border: none; /* Remove border */
		background: transparent; /* Make background transparent */
		font-size: 18px; /* Adjust size */
		color: #fff; /* Change color to white */
		cursor: pointer; /* Change cursor to pointer */
	}

		.delete-btn:hover {
			color: #ff0000; /* Change color on hover */
		}

	.ctnleaveForm{
		justify-content: flex-start;
		gap: 20px;
	}

	/*thông báo*/
	.notify-text:hover {
		color: black; /* Đổi màu chữ thành đen khi hover */
	}

	.notify-text {
		font-size: 14px;
		color: #7a7575; /* Màu chữ mặc định */
		margin-top: 10px;
		cursor: pointer;
	}

	.input-textarea {
		border: none; /* Bỏ viền mặc định */
		border-bottom: 2px solid transparent; /* Viền dưới ban đầu */
		transition: border-bottom 0.3s ease, background-color 0.3s ease; /* Hiệu ứng chuyển tiếp */
		border-radius: 5px; /* Bo góc */
		background-color: rgb(230, 248, 248); /* Màu nền mặc định */
	}

		.input-textarea:hover {
			background-color: rgb(141, 250, 250); /* Màu nền khi hover */
		}

		.input-textarea:focus {
			outline: none; /* Bỏ viền mặc định khi focus */
			border-bottom: 2px solid rgb(66, 133, 244); /* Đường viền dưới khi focus */
		}

	
	/* Nút bị vô hiệu hóa (disabled) */
	.disabled-button {
		background-color: lightgray;
		cursor: not-allowed;
		opacity: 0.6;
	}

	/* Nút kích hoạt bình thường */
	.active-button {
		background-color: rgb(66, 133, 244);
		cursor: pointer;
		color: white;
		opacity: 1;
	}
	
	/*xóa & sửa*/
	.icon{
		border: none;
		background: none;
		width: 40px;
		height: 40px;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center; /* Màu nền khi hover */
	}

	.icon:hover{
		background-color: rgba(145, 137, 137, 0.2);
	}

	.discussion-container {
		display: flex;
		width: 100%;
		height:600px;
		font-family: 'JetBrains Mono', serif;
	}

	/* Khung bên trái (kích thước cố định) */
	.left-panel {
		flex: 0 0 400px;
		padding: 20px;
		border: 1px solid #ddd;
		border-radius: 20px;
		box-sizing: border-box;
		margin-right: 20px;
	}

	/* Khung bên phải (co giãn) */
	.right-panel {
		flex: 1;
		display: flex;
		border: 1px solid #ddd;
		border-radius: 20px;
		box-sizing: border-box;
		flex-direction: column;
		position: relative;
	}

	/* Thiết lập form và các thành phần bên trong */
	.input-hidden {
		display: none;
	}

	.message-input-group {
		display: flex;
		align-items: center;
		gap: 10px;
		background-color: #FBEAF0;
		padding: 10px;
		border-bottom-left-radius: 20px;
		border-bottom-right-radius: 20px;
		height: 70px;
	}


	#messageInput {
		flex: 1;
		border-radius: 30px;
		height: 45px;
		padding-left: 10px;
		font-size: 17px;
		border: none;
		outline: none;
	}

	.record {
		background-color: transparent; /* Bỏ màu nền */
		border: none; /* Bỏ đường viền */
		padding: 0; /* Loại bỏ khoảng cách xung quanh */
		cursor: pointer; /* Thêm hiệu ứng con trỏ tay khi hover */
		display: flex;
		align-items: center;
	}


	/* Khung tin nhắn */
	.message-list {		
		list-style-type: none; 
		margin: 0;
		height: calc(100% - 70px); 
		width: 100%; 
		overflow-y: auto; /* Hiển thị thanh cuộn dọc nếu nội dung vượt quá chiều cao */
		box-sizing: border-box; /* Đảm bảo padding không tăng kích thước phần tử */
		
	}
	#messagesList {
		list-style-type: none;
		margin: 0;
		height: calc(100% - 70px); /* Chiều cao tối đa của khung */
		overflow-y: auto; /* Cuộn dọc khi nội dung vượt quá khung */
		
	}
	.message-form {
		position: absolute;
		bottom: 0;
		width: 100%;
	}

	.send-button_discuss {
		background: none;
		border: none;
		cursor: pointer;
		outline: none;
		display: flex;
		align-items: center;
	}

	.send-icon_discuss {
		fill: #ff397f; /* Màu biểu tượng */
		width: 20px;
		height: 20px;
	}

	.image-icon_discuss {
		display: flex;
		align-items: center; /* Canh giữa icon theo chiều dọc */
	}

	.file-label {
		background-color: transparent; /* Bỏ màu nền */
		border: none; /* Bỏ đường viền */
		padding: 0; /* Loại bỏ khoảng cách xung quanh */
		/*cursor: pointer;  Thêm hiệu ứng con trỏ tay khi hover */
		display: flex;
		align-items: center;
		margin:0;
	}

	.file-name {
		font-family: Poppins, sans-serif;
		font-size: 14px;
		margin-left: 10px;
		color: #6c757d;
		display: inline-block;
		max-width: 350px;
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
		margin-top: 15px;
	}

	.message-box{
		display: inline-block;
		max-width: 763px;
		border-radius: 10px;
		padding: 10px;
		background-color: #FBEAF0;
		margin-left:15px
	}

	.current-user {
		justify-content: flex-end; /* Hiển thị bên phải cho người khác */
		align-items: flex-end;
		margin-left: auto;	
	}

	/* Tin nhắn từ người khác */
	.other-user{
		justify-content: flex-start; /* Hiển thị bên trái cho người hiện tại */
		align-items: flex-start;

	}

	.search-box_discuss {
		width: 100%;
		max-width: 400px;
		margin: 0 auto;
		position: relative;
		font-family: Arial, sans-serif;
	}

	.search-input_discuss {
		width: 90%;
		padding: 10px 15px;
		padding-left: 40px; /* Để chừa chỗ cho biểu tượng tìm kiếm */
		font-size: 16px;
		border: 1px solid #ccc;
		border-radius: 20px;
		outline: none;
		transition: border 0.3s ease;
		margin-top: 20px;
		margin-left: 20px;
		margin-right: 20px;
	}

		.search-input_discuss:focus {
			border-color: #0078ff;
		}

	/* Biểu tượng tìm kiếm */
	.search-icon_discuss {
		position: absolute;
		top: 65%;
		left: 30px;
		transform: translateY(-50%);
		color: #888;
		font-size: 18px;
		pointer-events: none;
	}

	.account-info-container_discuss {
		overflow-y: auto;
		height: 530px;
		width: 400px;
		border-bottom-left-radius: 35px;
		border-bottom-right-radius: 35px;
	}

	.circle-text-container_discuss {
		display: flex; 
		align-items: center; 
		width:100%;
		padding: 15px; 
		border: none; 
		border-radius: 10px;
		background-color: none; 
		position: relative;
		transition: background-color 0.3s;
	}

		.circle-text-container_discuss:hover {
			background-color: #E1E1E1;
		}

	.circle_discuss {
		display:flex;
		width: 90px; /* Đường kính của hình tròn */
		height: 90px; /* Đường kính của hình tròn */
		border-radius: 50%; /* Để tạo hình tròn */
		margin-right: 10px; /* Khoảng cách giữa hình tròn và chữ */
		overflow: hidden;
		align-items: center;
		justify-content: center;
	}

		.circle_discuss img {
			width: 90px;
			height: 90px;
			object-fit: fill;
		}

	#listsv2 {
		display: flex;
		flex-wrap: wrap;
		gap: 20px;
	}

	.student-card {
		border: 1px solid #ddd;
		border-radius: 8px;
		padding: 10px;
		width: 200px;
		text-align: center;
		box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
	}

	.three-dots-icon_discuss {
		position: absolute;
		top: 10px; /* Đặt ở đầu container */
		right: 10px; /* Khoảng cách từ bên phải */
		cursor: pointer; /* Con trỏ chuột khi hover */
		color: #000000; /* Màu cho biểu tượng ba chấm */
	}

	.star-icon_discuss {
		position: absolute;
		bottom: 10px; /* Khoảng cách từ trên xuống */
		right: 10px; /* Khoảng cách từ bên phải */
		cursor: pointer; /* Con trỏ chuột khi hover */
		color: lightgray; /* Màu vàng cho biểu tượng ngôi sao */
	}

	.popup {
		display: none;
		position: fixed;
		z-index: 1;
		left: 0;
		top: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.4);
		overflow: auto;
		padding-top: 60px;
	}

	/* Nội dung của popup */
	.popup-content {
		background-color: #c7ffd0;
		margin: 5% auto;
		padding: 20px;
		border: 1px solid #888;
		width: 600px;
		border-radius:20px;
		display:flex;
	}

	/* Nút đóng */
	.popup-close {
		color: black;
		float: right;
		font-size: 30px;
		font-weight: bold;
		margin-left:auto;
		margin-top: -10px;
	}

		.popup-close:hover,
		.popup-close:focus {
			color: red;
			text-decoration: none;
			cursor: pointer;
		}

	.popup-image {
		width: 150px;
		height: 200px;
		margin-right: 40px;
		display: flex;
		justify-content: center;
		align-items: center;
		border-radius: 20px;
		overflow: hidden;
		background-color: #f0f0f0;
		flex-shrink: 0;
	}

	.popup-details p {
		margin: 5px 0;
		line-height: 1.5; 
		font-size: 18px;
		font-weight: 600;
	}


	.notification-box {
		display: none; /* Ẩn thông báo mặc định */
		position: fixed; /* Đặt vị trí cố định trên màn hình */
		top: 50%; /* Căn giữa theo trục dọc */
		left: 50%; /* Căn giữa theo trục ngang */
		transform: translate(-50%, -50%); /* Dịch chuyển để khung nằm chính giữa */
		padding: 20px;
		margin: 0; /* Xóa margin để không ảnh hưởng đến vị trí */
		border: 1px solid #ccc;
		background-color: #e0f7fa;
		border-radius: 5px;
		width: 50%; /* Độ rộng bằng 50% màn hình, có thể tùy chỉnh */
		max-width: 400px; /* Giới hạn độ rộng tối đa */
		box-sizing: border-box;
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Tạo hiệu ứng đổ bóng */
		z-index: 1000; /* Đảm bảo khung nằm trên các thành phần khác */
        }

#notificationBox {
    max-height: 300px;
    overflow-y: auto;
    padding: 10px;
    border: 1px solid #ccc;
    background-color: #f9f9f9;
}

.notify-item {
    margin-bottom: 10px;
    padding: 5px 10px;
    border-radius: 5px;
    background-color: #e6f7ff;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

</style>

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@16,400,0,0" />
<style>
	.material-symbols-outlined {
		font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 16
	}
</style>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Merriweather:ital,wght@0,300;0,400;0,700;0,900;1,300;1,400;1,700;1,900&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Merriweather:ital,wght@0,300;0,400;0,700;0,900;1,300;1,400;1,700;1,900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Merriweather:ital,wght@0,300;0,400;0,700;0,900;1,300;1,400;1,700;1,900&family=Oswald:wght@200..700&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">


<div style="position: relative;">
	<img class="img-fluid" src="/images/@Model.ClassRoom.backgroundUrl" alt="No Images" style="width: 100%; height: 400px;" />
	@{
		if (Model.isOwner)
		{
									<form id="changeBG" action="/ClassRooms/changeBackground" method="POST" enctype="multipart/form-data" style="position: absolute; bottom: 10px; right: 10px;">
										<input type="hidden" name="classId" value="@Model.ClassRoom.Id" />
										<label for="file-upload" class="custom-file-upload">
											<i class="fa-solid fa-camera"></i>
											Thay đổi ảnh bìa
										</label>
										<input id="file-upload" type="file" name="image" accept="image/*" required
										   	onchange="document.getElementById('changeBG').submit();" style="display:none;" />
									</form>
		}
	}
	
</div>

<div class="class-info">
	<h1 style="font-family: Poppins, sans-serif;font-size: 28px;">@Model.ClassRoom.Name</h1>
	<p style="font-family: Poppins, sans-serif;font-size: 18px; max-width: 100%; word-wrap: break-word;overflow-wrap: break-word;">@Model.ClassRoom.Description</p>
	<div class="container">
		<div class="row">
			<div class="col-md-6" style="margin-bottom: 10px;">
				<div class="d-flex justify-content-start">
					<a href="@Model.ClassRoom.RoomOnline&User=@user.Id&class=@Model.ClassRoom.Id" id="diemDanhBtn" class="btn btn-primary custom-button" id="join-btn"
					   style="
							font-family: Poppins, sans-serif;
							background-color: #2dac66;
							font-size: 15px;
							font-weight: bold;">Tham gia phòng học</a>
				</div>
			</div>
			<div class="col-md-6">
				<div class="d-flex justify-content-end">
					<div class="more-options" style="display: inline;">
						<div class="dropdown">
							<button class="btn btn-secondary custom-button"
									style="
										background-color: #0365a7">
								<i style="
									font-family: Poppins, sans-serif;
									font-size: 15px;
									font-weight: bold;">Thêm Thành Viên</i>
							</button>
							<div class="dropdown-content">
								@{
									// T?o du?ng d?n cho mã QR
									var qrData = Model.ClassRoom.Id;

									// T?o mã QR t? d? li?u
									var writer = new ZXing.BarcodeWriterSvg
									{
										Format = ZXing.BarcodeFormat.QR_CODE,
										Options = new ZXing.QrCode.QrCodeEncodingOptions
										{
											Width = 50,
											Height = 50
										}
									};
									var qrCode = writer.Write(qrData);
								}
								<div>
									@Html.Raw(qrCode) <!-- Hi?n th? mã QR -->
								</div>

								<a asp-action="AddListSV" asp-route-id="@Model.ClassRoom.Id" style="font-family: Poppins, sans-serif;">Thêm danh sách sinh viên</a>
								<p style="font-family: Poppins, sans-serif; font-size: 14px;">
									Mã lớp: <input type="text" id="contentcopy" value="@Model.ClassRoom.Id" readonly style="border: none; background: transparent; font-size: 14px; width: 60px;" />
									<button style="border: none; background-color: transparent;" id="btnCopy">
										<span id="icon" style="font-size: 20px;" class="material-symbols-outlined">content_copy</span>
									</button>
								</p>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<div class="tabs" style="display: flex; justify-content: center;">
	<div class="tab" onclick="openTab(event, 'teacher')" style="font-family: Poppins, sans-serif;font-weight: 600">Thông tin giáo viên</div>
	<div class="tab" onclick="openTab(event, 'posts')" style="font-family: Poppins, sans-serif;font-weight: 600">Bài Giảng</div>
	<div class="tab" onclick="openTab(event, 'assignments')" style="font-family: Poppins, sans-serif;font-weight: 600">Bài tập</div>
	<div class="tab" onclick="openTab(event, 'discussion')" style="font-family: Poppins, sans-serif;font-weight: 600">Thảo luận</div>
	<div class="tab" onclick="openTab(event, 'listsv')" style="font-family: Poppins, sans-serif;font-weight: 600">Danh sách sinh viên</div>
	<div class="tab" onclick="openTab(event, 'bangdiem')" style="font-family: Poppins, sans-serif;font-weight: 600">Bảng điểm</div>
	<div class="tab" onclick="openTab(event, 'padlet')" style="font-family: Poppins, sans-serif;font-weight: 600">Padlet</div>
	<div class="tab" onclick="openTab(event, 'letter')" style="font-family: Poppins, sans-serif;font-weight: 600">Đơn từ</div>
	<div class="tab" onclick="openTab(event, 'setting')" style="font-family: Poppins, sans-serif;font-weight: 600">Settings</div>
	<div class="tab" onclick="openTab(event, 'mainload')" style="font-family: Poppins, sans-serif;font-weight: 600" hidden>MainLoad</div>
	<div class="tab" onclick="openNotification()" style="font-family: Poppins, sans-serif;font-weight: 600">Thông báo</div>
</div>
<div id="teacher" class="tabcontent">
	<div class="teacher-info" style="background-color: #fdffe0">
		<h2 style="font-family: Poppins, sans-serif;">Thông tin giáo viên</h2>
		<div class="teacher-details">			
			<img src="/Imgs_avtUser/@Model.Owner.UrlAvt" alt="Teacher image" class="teacher-image" />
			<div class="teacher-text">
				<p style="font-family: Poppins, sans-serif;"><strong>Mã giảng viên:</strong> @Model.Owner.Mssv</p>
				<p style="font-family: Poppins, sans-serif;"><strong>Tên giảng viên:</strong> @Model.Owner.Name</p>
				<p style="font-family: Poppins, sans-serif;"><strong>Email:</strong> @Model.Owner.Email</p>
			</div>
		</div>
	</div>
</div>
<div id="posts" class="tabcontent">
	@{
		if (Model.isOwner)
		{
									<div>
										<button id="browseBaiGiang">Chọn File BAIGIANG</button>
										<div id="progressBar"></div>
									</div>

		}
	}
	<div class="posts" id="lectureContainer">
		<partial name="_lecturePartial" model="Model.Unit" />
	</div>

</div>
<div id="assignments" class="tabcontent">
	@{
		if (Model.isOwner)
		{
					<button id="uploadButton" onclick="Showtaobaitap()"
							style="
																background-color: #3498db;
																font-family: Poppins, sans-serif;
																color: #ffffff;
																padding: 10px 20px;
																border: none;
																border-radius: 5px;
																cursor: pointer;
																transition: background-color 0.3s;
																font-size: 15px;
																font-weight: bold;">
						Tạo bài tập mới
					</button>
					<form id="uploadbaitap" action="/ClassRooms/CreateBaitap" method="POST" style="display: none;">
						<div class="form-section">
							<!-- Ph?n nh?p tiêu d? -->
							<input type="text" name="Title" id="titleInput" class="form-control" placeholder="Nhập tiêu đề">
							<!-- G?ch ngang -->
							<hr>
							<!-- Ph?n nh?p mô t? -->
							<textarea name="Content" id="descriptionInput" class="form-control" placeholder="Nhập mô tả"></textarea>
							<label for="deadlineInput">Hạn nộp:</label>
							<input type="datetime-local" name="Deadline" id="deadlineInput" class="form-control">

							<label for="fileFormatSelect">Chọn định dạng file cần nộp:</label>
							<select name="FileFormat" id="fileFormatSelect">
								<option value="pdf">pdf</option>
								<option value="docx">docx</option>
								<option value="xlsx">xls</option>
								<option value="allfile">all file</option>
								<!-- Thêm các lo?i d?nh d?ng khác n?u c?n -->
							</select>

						</div>
										<input type="hidden" name="ClassId" id="classIdInput" value="@Model.ClassRoom.Id">
										<label for="fileInput">Hướng dẫn (Nếu có): </label>
										<input type="file" name="FileUpLoad" id="fileInput" /> <!-- ?n input file -->
										<input type="hidden" name="AttactURL" id="attactURL">
										<button type="button" onclick="uploadFile()">Upload</button>

										<div class="modal" id="uploadModal" style="background-color: transparent;">
											<div class="modal-content">
												<div class="modal-header">
													<h5 class="modal-title">Uploading File</h5>
												</div>
												<div class="modal-body text-center">
													<div class="loader" id="loader" style="display: block;"></div>
													<progress id="progressBar" value="0" max="100" style="display: none;"></progress>
													<div id="progressText" style="display: block;" class="mt-3">0%</div>
													<div id="successText" class="mt-3" style="display: none;">Upload thành công</div>
												</div>
											</div>
										</div>

										<div class="modal-backdrop" id="modalBackdrop"></div>


															<input type="submit" value="Giao bài" class="btn btn-primary"></input> <!-- Nút giao bài -->
														</form>
		}
	}
	<div class="assignments">
		<h2 style="font-family: Poppins, sans-serif;">Danh sách bài tập</h2>
		@foreach (var assignment in Model.Homework.ToList())
		{
			<div class="assignment" style="height: 30vh;">
				<div class="assignment-content" style="border-right: 1px solid black; height: 100%; width: 100%; margin: 50px; ">
					@{
						if (Model.isOwner)
						{
																		<a class="btn btn-info" style="float: left; max-width: 50px; padding: 5px;" asp-action="DeleteBT" asp-controller="ClassRooms" asp-route-id="@assignment.Id" asp-route-classId="@assignment.ClassRoomId" onclick="return confirm('B?n có ch?c mu?n xóa không ?')">Xóa</a>
						}
					}
					<h3 class="text-center">@assignment.Title</h3>
					<p class="assignment-description">@assignment.Content</p>
					@{
						if (assignment.Deadline.HasValue)
						{
								<p class="assignment-description">Hạn nộp: @assignment.Deadline</p>
						}
						else
						{
																		<p class="assignment-description">Hạn nộp: Vô thời hạn</p>
						}
					}

					<!-- Hi?n th? lo?i d?nh d?ng dã ch?n -->
					<p class="assignment-file-format">Yêu cầu nộp file: @assignment.FileFormat</p>
					<!-- Hi?n th? t?p dính kèm -->
					@if (!string.IsNullOrEmpty(assignment.attractUrl))
					{
						<a href="/Uploads/BAITAP/@assignment.attractUrl" target="_blank" style="text-decoration:none; color: deepskyblue!important;">@assignment.attractUrl</a>
					}
				</div>
				@{
					// L?y userId
					string userId = user != null ? user.Id : null;

					// L?y baiTapId t? assignment ho?c t? noi khác
					string baiTapId = assignment != null ? assignment.Id : null;

					// Ki?m tra xem user dã n?p bài t?p hay chua
					bool hasSubmitted = userId != null && baiTapId != null ? CheckNop.HasUserSubmittedBaiTap(userId, baiTapId) : false;
				}

				<form id="submitForm_@assignment.Id" action="/ClassRooms/Nopbai" method="post" enctype="multipart/form-data" class="assignment-form" onsubmit="return validateAndSubmit('@assignment.FileFormat', '@assignment.Id', event)">

					<div class="upload-form " style="margin-right: 30px;">
						@{
							if (!Model.isOwner)
							{
																			<label for="file-upload" class="file-label1" style="white-space: nowrap;">Bài tập của bạn</label>
																			<div class="file-input-wrapper">
																				@{
										if (hasSubmitted)
										{
																													<p style="text-align: center; margin-left: 15px;">Đã nộp bài</p>
										}
										else
										{

											// Ki?m tra deadline
											if (assignment != null && assignment.Deadline.HasValue)
											{
												// L?y ngày deadline
												DateTime deadline = assignment.Deadline.Value;

												// Ki?m tra xem deadline dã qua hay chua
												if (DateTime.Now > deadline)
												{
													// X? lý khi deadline dã qua
													// Ví d?: hi?n th? thông báo cho ngu?i dùng
																																			<p>Deadline dã qua. Không thể nộp bài tập nữa.</p>
												}
												else
												{
													// X? lý khi deadline chua qua
													// Ví d?: cho phép ngu?i dùng n?p bài t?p
																																			<p>Thiếu</p>
																																			<input id="FileInput_@assignment.Id" type="file" name="FileNopbai">
																																			<input type="hidden" name="ClassId" id="classIdInput" value="@Model.ClassRoom.Id">
																																			<input type="hidden" name="BaitapId" id="baitapinput" value="@assignment.Id">

																																			<button type="submit">Nộp bài</button>
																																			<button type="button" onclick="previewFile('@assignment.Id')">Xem trước</button>
												}
											}
											else
											{
												// X? lý khi không có deadline du?c d?t

																																		<p>Thiếu</p>
																																		<input id="FileInput_@assignment.Id" type="file" name="FileNopbai">
																																		<input type="hidden" name="ClassId" id="classIdInput" value="@Model.ClassRoom.Id">
																																		<input type="hidden" name="BaitapId" id="baitapinput" value="@assignment.Id">

																																		<button type="submit">Nộp bài</button>
																																		<button type="button" onclick="previewFile('@assignment.Id')">Xem trước</button>
											}
										}
																				}
																			</div>
																			<div id="previewContainer_@assignment.Id"></div>
							}
							else
							{
																			<a asp-action="GetAllBTStu" asp-controller="ClassRooms" asp-route-classid="@Model.ClassRoom.Id" asp-route-baitapID="@assignment.Id" class="btn btn-info ">Xem bài tập đã nộp</a>
							}
						}

					</div>
				</form>
			</div>
		}
	</div>
</div>
<div id="discussion" class="tabcontent">
	<div class="discussion">
		<div class="discussion-container">
			<!-- Khung bên trái nhỏ hơn -->
			<div class="left-panel">
				<div class="search-box_discuss" style="margin-bottom: 20px;">
					<!-- Biểu tượng tìm kiếm -->
					<span class="search-icon_discuss">🔍</span>
					<!-- Thanh tìm kiếm -->
					<input type="search"
						   class="search-input_discuss"
						   placeholder="Tìm kiếm trên Messenger"
						   aria-label="Tìm kiếm trên Messenger"
						   dir="ltr"
						   autocomplete="off"
						   spellcheck="false">
				</div>
				<div class="account-info-container_discuss">
					<div class="popup" id="popup" style="display: none;">
						<div class="popup-content">					
							<div class="popup-image">
								<img id="student-image" src="" alt="Student Avatar" style="width: 100%; height: 100%; object-fit:cover" />
							</div>
							<div class="popup-details">
								<h3 style="margin-top:-5px; font-weight:600;">Thông tin sinh viên</h3>
								<p id="student-mssv"></p>
								<p id="student-name"></p>
								<p id="student-email"></p>
							</div>	
							<span class="popup-close" onclick="closePopup()">×</span>
						</div>
					</div>
					<div id="listsv2"></div>
					<div class="circle-text-container_discuss" id="student-template" style="display: none;">
						<div class="circle_discuss ">
							<img src="" alt="No Image" class="student-avatar" />
						</div>
						<h3 style="font-size: 18px; margin: 0; font-weight: 600;" class="student-info"></h3>
						<span class="three-dots-icon_discuss">
							<svg xmlns="http:www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-three-dots-vertical" viewBox="0 0 16 16">
								<path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0" />
							</svg>
						</span>
						<span class="star-icon_discuss">
							<button type="button" class="send-notify-btn">★</button>
						</span>
					</div>
							
				</div>
			</div>
			<div class="right-panel">
				<div id="messagesList" class="message-list">
					<partial name="_MessagePartial" model="Model.Message" />
				</div>
				<form id="uploadForm" enctype="multipart/form-data" class="message-form">
					<div class="input-hidden">
						<input type="text" id="userInput" class="form-control"  />
						<input type="text" id="classId" class="form-control" value="@Model.ClassRoom.Id" />
					</div>
					<div class="message-input-group">
						<button type="button" onclick="startSpeechRecognition()" id="recordButton" class="record" title="Bắt đầu ghi âm">
							<svg class="microphone-icon" height="25px" viewBox="0 0 24 24" width="25px">
								<title>Nhấn để ghi âm</title>
								<path d="M5 4a4 4 0 018 0v5.5a4 4 0 01-8 0V4z" fill="#ff397f"></path>
								<path d="M3.5 20.5a1 1 0 011-1h2.75a.5.5 0 00.5-.5v-.66a.52.52 0 00-.43-.5A8.5 8.5 0 01.5 9.5V9a1 1 0 011-1H2a1 1 0 011 1v.5a6 6 0 0012 0V9a1 1 0 011-1h.5a1 1 0 011 1v.5a8.5 8.5 0 01-6.82 8.33.52.52 0 00-.43.51V19c0 .28.22.5.5.5h2.75a1 1 0 011 1v.5a1 1 0 01-1 1h-9a1 1 0 01-1-1v-.5z" fill="#ff397f"></path>
							</svg>
						</button>
						<label class="file-label" for="FileInput" title="Chọn tệp">
							<span class="image-icon_discuss">
								<svg xmlns="http://www.w3.org/2000/svg" width="25px" height="25px" fill="#ff397f" class="bi bi-paperclip" viewBox="0 0 16 16">
									<path d="M4.5 3a2.5 2.5 0 0 1 5 0v9a1.5 1.5 0 0 1-3 0V5a.5.5 0 0 1 1 0v7a.5.5 0 0 0 1 0V3a1.5 1.5 0 1 0-3 0v9a2.5 2.5 0 0 0 5 0V5a.5.5 0 0 1 1 0v7a3.5 3.5 0 1 1-7 0z" />
								</svg>
							</span>
						</label>
						<input type="file" id="FileInput" style="display: none;">
						@*<span id="fileName" class="file-name">Không có tệp nào được chọn</span> *@
						<input type="text" class="form-control" id="messageInput" placeholder="Nhập tin nhắn" />
						<button type="button" id="sendButton" class="send-button_discuss" aria-label="Nhấn Enter để gửi">
							<svg class="send-icon_discuss" height="25px" viewBox="0 0 24 24" width="25px">
								<title>Nhấn Enter để gửi</title>
								<path d="M16.6915026,12.4744748 L3.50612381,13.2599618 C3.19218622,13.2599618 3.03521743,13.4170592 3.03521743,13.5741566 L1.15159189,20.0151496 C0.8376543,20.8006365 0.99,21.89 1.77946707,22.52 C2.41,22.99 3.50612381,23.1 4.13399899,22.8429026 L21.714504,14.0454487 C22.6563168,13.5741566 23.1272231,12.6315722 22.9702544,11.6889879 C22.8132856,11.0605983 22.3423792,10.4322088 21.714504,10.118014 L4.13399899,1.16346272 C3.34915502,0.9 2.40734225,1.00636533 1.77946707,1.4776575 C0.994623095,2.10604706 0.8376543,3.0486314 1.15159189,3.99121575 L3.03521743,10.4322088 C3.03521743,10.5893061 3.34915502,10.7464035 3.50612381,10.7464035 L16.6915026,11.5318905 C16.6915026,11.5318905 17.1624089,11.5318905 17.1624089,12.0031827 C17.1624089,12.4744748 16.6915026,12.4744748 16.6915026,12.4744748 Z" fill="var(--chat-composer-button-color)"></path>
							</svg>
						</button>
					</div>
				</form>
			</div>
		</div>
	</div>
	
	
</div>



<div id="listsv" class="tabcontent">
	@{
		if (Model.isOwner)
		{
				<div style="margin-bottom: -35px;">
					<form asp-controller="ClassRooms" asp-action="ExportDSSV" asp-route-classID="@Model.ClassRoom.Id" method="post">
						<button type="submit" class="btn btn-info">Xuất danh sách sinh viên</button>
					</form>
				</div>
		}
	}
	<div id="listsv1">
	</div>
</div>
<div id="bangdiem" class="tabcontent">
	@{
		List<BaiTap> bt = ViewBag.ListBT as List<BaiTap>;
		List<DiemViewModel> diems = ViewBag.ListDiem as List<DiemViewModel>;
	}
	<div class="container-bangdiem">
		<table id="user">
			<thead>
				<tr class="first-column">
					<th style="text-align: center;" rowspan="2">Họ và tên</th>
					<th style="text-align: center;" rowspan="2">MSSV</th>
					<th style="text-align: center;" colspan="@bt.Count">Bài Tập</th>
					<th style="text-align: center;" rowspan="2">ÐTB</th>
				</tr>
				<tr>
					@foreach (var item in bt)
					{
						<th style="text-align: center;">@item.Title</th>
					}
				</tr>
			</thead>
			<tbody>
				@foreach (var item in diems)
				{
					<tr>
						<td>@item.HoVaTen</td>
						<td>@item.MSSV</td>

						@if (bt.Count <= 0)
						{
							<td> </td>
						}
						else
						{
							@foreach (var d in @item.listDiemBT)
							{
								<td style="text-align: center;">@d</td>
							}
						}
						<td>@item.DTB</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
</div>
<div id="padlet" class="tabcontent">
	<div class="padlet-embed" style="border:1px solid rgba(0,0,0,0.1);border-radius:2px;box-sizing:border-box;overflow:hidden;position:relative;width:100%;background:#F4F4F4"><p style="padding:0;margin:0"><iframe src="https://padlet.com/embed/lup9um2r33899yju" frameborder="0" allow="camera;microphone;geolocation" style="width:100%;height:608px;display:block;padding:0;margin:0"></iframe></p><div style="display:flex;align-items:center;justify-content:end;margin:0;height:28px"><a href="https://padlet.com?ref=embed" style="display:block;flex-grow:0;margin:0;border:none;padding:0;text-decoration:none" target="_blank"><div style="display:flex;align-items:center;"><img src="https://padlet.net/embeds/made_with_padlet_2022.png" width="114" height="28" style="padding:0;margin:0;background:0 0;border:none;box-shadow:none" alt="Made with Padlet"></div></a></div></div>
</div>
<div id="letter" class="tabcontent">
	<button type="button" class="btn btn-primary" onclick="toggleLeaveRequestForm()">Tạo đơn xin nghỉ phép</button>
	<div id="leaveRequestFormContainer" style="display:none; margin-top: 20px;">
		<form id="leaveRequestForm">
			<input type="hidden" name="Id" value="0" />

			<div class="form-group" hidden>
				<label for="ClassId">Class ID:</label>
				<input type="text" class="form-control" id="ClassId" name="ClassId" value="@Model.ClassRoom.Id" readonly hidden/>
			</div>

			<div class="form-group">
				<label for="StudenName">Họ và tên:</label>
				<input type="text" class="form-control" id="StudenName" name="Name" value="@user.Name" readonly/>
				<input type="hidden" class="form-control" id="UserID" name="UserID" value="@user.Id" hidden/>
			</div>

			<div class="form-group">
				<label for="StartDate">Ngày bắt đầu:</label>
				<input type="date" class="form-control" id="StartDate" name="StartDate" />
			</div>

			<div class="form-group">
				<label for="EndDate">Ngày kết thúc:</label>
				<input type="date" class="form-control" id="EndDate" name="EndDate" />
			</div>

			<div class="form-group">
				<label for="Reason">Lý do:</label>
				<textarea class="form-control" id="Reason" name="Reason" rows="4"></textarea>
			</div>

			<button type="submit" class="btn btn-primary" onclick="submitLeaveRequest(event)">Gửi yêu cầu</button>
		</form>
	</div>

	<div class="container ctnleaveForm">
		<div id="leaveRequestsList" class="row">
			<!-- Cards will be dynamically added here -->
		</div>
	</div>



</div>

<div id="setting" class="tabcontent">
	<h1>This is setting class</h1>
</div>
<div id="mainload" class="tabcontent">
	<div class="text-center">
		<h1 class="display-4" style="font-family: 'Poppins', sans-serif">Let's Study With Us</h1>
		<p id="currentDateTime" style="font-family: 'Poppins', sans-serif"></p>
	</div>
	@{
	       if (Model.isOwner)
	       {
				<div class="create-content"
				 	style="border: 1px solid rgb(145, 137, 137);
				border-radius: 8px;
				padding: 10px;
				height: 100%;
				margin: 20px;
				display: flex;
				align-items: center;">

					<!-- Icon hình tròn với SVG bên trong -->
					<div class="circle-icon" style="background-color: rgb(66, 133, 244); border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; margin-right: 10px; margin-left: 20px;">
						<svg focusable="false" width="24" height="24" viewBox="0 0 24 24" class="NMm5M hhikbc" style="fill: white;">
							<path d="M7 15h7v2H7zm0-4h10v2H7zm0-4h10v2H7z"></path>
							<path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-.14 0-.27.01-.4.04a2.008 2.008 0 0 0-1.44 1.19c-.1.23-.16.49-.16.77v14c0 .27.06.54.16.78s.25.45.43.64c.27.27.62.47 1.01.55.13.02.26.03.4.03h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7-.25c.41 0 .75.34.75.75s-.34.75-.75.75-.75-.34-.75-.75.34-.75.75-.75zM19 19H5V5h14v14z"></path>
						</svg>
					</div>

					<!-- Văn bản thông báo với sự kiện onclick -->
					<h3 class="notify-text" style="cursor: pointer; margin-left: 20px;" onclick="expandContent()">Thông báo nội dung nào đó cho lớp học của bạn</h3>

					<!-- Phần form ẩn -->
					<form id="uploadpost" action="/ClassRooms/CreatePost" method="POST" style="width: 100%; display: none;">
						<div id="expandable-form" style="display: none; width: 100%;">
							<input type="text" name="Title" id="titleInput" class="form-control" placeholder="Nhập tiêu đề" style="margin-bottom: 10px; width: 100%; border-radius: 5px; padding: 10px;" />
							<textarea name="Content" id="inputText" rows="4" class="input-textarea" oninput="checkInput()" style="width: 100%; border-radius: 5px; margin-top: 10px; padding: 10px;" placeholder="Nhập nội dung..."></textarea>
							<div style="display: flex; justify-content: flex-end; margin-top: 10px;">
								<button type="button" onclick="cancelInput()" style="margin-right: 10px; padding: 5px 10px;">Hủy</button>
								<button id="submitButton" class="disabled-button" onclick="submitInput()" style="padding: 5px 10px;" disabled>Đăng</button>
							</div>
						</div>
						<input type="hidden" name="ClassId" id="classIdInput" value="@Model.ClassRoom.Id" />
						<input type="hidden" name="UserId" id="UserIdInput" value="@Model.ClassRoom.UserId" />
					</form>
					@{
					if (Model.isOwner)
					{
								<div style="background-color: none; color: white; border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; margin-left: auto;">
									<button onclick="toggleClassSelection()" class="icon">
										<svg focusable="false" width="24" height="24" viewBox="0 0 24 24" class=" NMm5M">
											<path d="M19 5H4v6h2V7h13M5 19h15v-6h-2v4H5"></path>
											<path d="M16.29 10.71l-1.41-1.42L18.17 6l-3.29-3.29 1.41-1.42L21 6zm-8.58 12L3 18l4.71-4.71 1.41 1.42L5.83 18l3.29 3.29z"></path>
										</svg>
									</button>
								</div>

					}
					}
				</div>
				<div id="postContainer" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.7); z-index: 1000;">
					<div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #fff; color: black; border-radius: 8px; padding: 20px; width: 500px; height: 300px; overflow: auto;">
						<button onclick="closePostContainer()" style="float: right;margin_bottom:10%;margin-left:20px ;background-color: red; color: white; border: none; cursor: pointer; border-radius: 4px;">
							<i class="fas fa-times" style="font-size: 20px;"></i> <!-- Biểu tượng dấu X -->
						</button>
						<div class="mainList" style="margin-top:40px;">
							@foreach (var post in ViewBag.UserPosts)
						{
								<div style="margin-bottom: 10px; display: flex; justify-content: space-between; align-items: center;">
									<span style="text-align: left;">@post.Title</span>
									<button type="button" style="color: black;" onclick="showPostContent('@post.Id')">Sử dụng lại</button>
								</div>
						}
						</div>

						@foreach (var post in ViewBag.UserPosts)
					{
							<div id="postList-@post.Id" class="postList" style="display: none; margin-top: 40px;">
								<form method="post" asp-action="ReusePost" asp-controller="ClassRooms" style="display: inline;">
									<input type="hidden" name="postId" value="@post.Id" />
									<input type="hidden" name="ClassId" id="classIdInput" value="@Model.ClassRoom.Id" />
									<input type="hidden" name="UserId" id="UserIdInput" value="@Model.ClassRoom.UserId" />
									<!-- Cho phép chỉnh sửa tiêu đề và nội dung -->
									<input type="text" name="Title" class="form-control" value="@post.Title" />
									<textarea name="Content" class="input-textarea" style="width: 100%; border-radius: 5px; margin-top: 10px; padding: 10px;">@post.Content</textarea>
									<button type="submit" style="color: black;">Đăng</button>
									<button type="button" onclick="cancelReuse('@post.Id')" style="color: black; margin-left: 10px;">Hủy</button>
								</form>
							</div>
					}
					</div>
				</div>
				
		}
	}	
	
	@{
		// Tạo một danh sách kết hợp các đối tượng vô danh
		var combinedList = Model.Post.Select(p => new
		{
			Type = "Post",
			Id = p.Id,
			Title = p.Title,
			Content = p.Content,
			CreatedAt = p.CreateTime,
			OwnerName = Model.Owner.Name,
			ClassRoomId = p.ClassRoomId
		})
		.Union(Model.Homework.Select(h => new
		{
			Type = "Homework",
			Id = h.Id,
			Title = h.Title,
			Content = (string)null, // Bài tập có thể không có nội dung
			CreatedAt = h.CreatedAt,
			OwnerName = Model.Owner.Name,
			ClassRoomId = h.ClassRoomId
		}))
		.OrderByDescending(item => item.CreatedAt) // Sắp xếp theo thời gian tạo
		.ToList();
	}


	@foreach (var item in combinedList)
	{
		<div class="create-content"
			 style="border: 1px solid rgb(145, 137, 137);
				border-radius: 8px;
				padding: 10px;
				height: 100%;
				margin: 20px;
				display: flex;
				align-items: center;
				position: relative;">

			<div id="circle-icon-@item.Id" style="background-color: rgb(66, 133, 244); border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; margin-right: 10px; margin-left: 20px;">
				<svg focusable="false" width="24" height="24" viewBox="0 0 24 24" class="NMm5M hhikbc" style="fill: white;">
					<path d="M7 15h7v2H7zm0-4h10v2H7zm0-4h10v2H7z"></path>
					<path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-.14 0-.27.01-.4.04a2.008 2.008 0 0 0-1.44 1.19c-.1.23-.16.49-.16.77v14c0 .27.06.54.16.78s.25.45.43.64c.27.27.62.47 1.01.55.13.02.26.03.4.03h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7-.25c.41 0 .75.34.75.75s-.34.75-.75.75-.75-.34-.75-.75.34-.75.75-.75zM19 19H5V5h14v14z"></path>
				</svg>
			</div>

			<div id="post-info-@item.Id" style="display: flex; flex-direction: column; margin-left: 10px; margin-top: -3.5px;">

				@if (item.Type == "Post")
				{
					<h3 style="font-size: 16px; margin-bottom: 0px;">đã đăng một thông báo mới: @item.Title</h3>
				}
				else
				{
					<h3 style="font-size: 16px; margin-bottom: 0px;">@item.OwnerName đã đăng một bài tập mới: @item.Title</h3>
				}

				@if (item.Type == "Post")
				{
					<p style="font-size: 16px; margin-bottom: 0px;">@item.Content</p>
				}
				<p class="post-created-at" style="font-size: 14px; color: gray; margin-top: 0px;">@item.CreatedAt.ToString("dd/MM/yyyy - HH:mm:ss")</p>
			</div>

			@{
				if (Model.isOwner && item.Type == "Post")
				{
						<div id="post-options-@item.Id" style="margin-left: auto; cursor: pointer; display: flex; align-items: center; height: 100%;">
							<button id="post-options-@item.Id" class="icon">
								<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
									<circle cx="12" cy="5" r="2" fill="gray"></circle>
									<circle cx="12" cy="12" r="2" fill="gray"></circle>
									<circle cx="12" cy="19" r="2" fill="gray"></circle>
								</svg>
							</button>
							<div class="options-menu" style="display: none;padding:10px; top: 85px; right:40px; position: absolute; background-color: white; border: 1px solid gray; border-radius: 5px; z-index: 10;">
								<a class="btn" href="javascript:void(0);" onclick="showEditForm('@item.Id')">Sửa</a>
								<a class="btn" asp-action="Delete" asp-controller="Posts" asp-route-id="@item.Id" asp-route-classId="@item.ClassRoomId" onclick="return confirm('Bạn có chắc muốn xóa không ?')">Xóa</a>
							</div>
						</div>
						<!-- Form ẩn để chỉnh sửa bài viết -->
						<div id="editForm-@item.Id" style="display: none; margin-top: 10px; width: 100%;">
							<form action="/Posts/Editpost" method="POST">
								<input type="hidden" name="Id" value="@item.Id" />
								<input type="text" name="Title" value="@item.Title" class="form-control" placeholder="Nhập tiêu đề" style="margin-bottom: 10px;" />
								<textarea name="Content" rows="4" class="input-textarea" style="width: 100%; border-radius: 5px; margin-top: 10px; padding: 10px;" placeholder="Nhập nội dung">@item.Content</textarea>
								<div style="display: flex; justify-content: flex-end; margin-top: 10px;">
									<button type="button" onclick="hideEditForm('@item.Id')" style="margin-right: 10px;">Hủy</button>
									<button type="submit" class="btn btn-success">Lưu</button>
								</div>
								<input type="hidden" name="ClassId" id="classIdInput" value="@Model.ClassRoom.Id" />
								<input type="hidden" name="UserId" id="UserIdInput" value="@Model.ClassRoom.UserId" />
							</form>
						</div>
				}
			}
		</div>
	}
	
</div>
	<div id="notification" class="notification-box">
		<div id="notificationBox">

		</div>
		
	</div>



@* ==================================SCRIPT======================================================*@
<script>
    // Hàm hiển thị thông báo
    function openNotification() {
        // Lấy phần tử thông báo
        var notificationBox = document.getElementById("notification");
        
        // Kiểm tra xem khung thông báo đã hiển thị hay chưa
        if (notification.style.display === "none" || notification.style.display === "") {
            notification.style.display = "block";  // Hiển thị thông báo
        } else {
            notification.style.display = "none";  // Ẩn thông báo
        }
    }
</script>
<script>
	function showPostContent(postId) {
		// Hide all post lists
		const postLists = document.querySelectorAll('.postList');
		postLists.forEach(postList => {
			postList.style.display = 'none'; // Hide all postLists
		});

		// Show the specific postList related to the clicked button
		const postListToShow = document.getElementById(`postList-${postId}`);
		if (postListToShow) {
			postListToShow.style.display = 'block'; // Show the specific postList
		}

		// Hide the main list (you may need to adjust the selector based on your structure)
		const mainList = document.querySelector('.mainList'); // Assuming you wrap your main list in a div with class "mainList"
		if (mainList) {
			mainList.style.display = 'none'; // Hide the main list
		}
	}

	function cancelReuse(postId) {
		// Hide the specific postList when cancel is clicked
		const postListToHide = document.getElementById(`postList-${postId}`);
		if (postListToHide) {
			postListToHide.style.display = 'none'; // Hide the postList
		}

		// Optionally show the main list again
		const mainList = document.querySelector('.mainList'); // Again, adjust if necessary
		if (mainList) {
			mainList.style.display = 'block'; // Show the main list
		}
	}

</script>
<script>
	function toggleClassSelection() {
		var form = document.getElementById("postContainer");
		// Check display status and toggle visibility
		if (form.style.display === "none" || form.style.display === "") {
			form.style.display = "block"; // Show the form
		} else {
			form.style.display = "none"; // Hide the form
		}
	}

	function closePostContainer() {
		document.getElementById("postContainer").style.display = "none";
	}	
</script>
<script>
	function showEditForm(postId) {
		// Ẩn tất cả các form chỉnh sửa khác
		var forms = document.querySelectorAll('[id^="editForm-"]');
		forms.forEach(function (form) {
			form.style.display = 'none';
		});

		// Hiển thị form chỉnh sửa cho bài viết cụ thể
		var editForm = document.getElementById('editForm-' + postId);
		if (editForm) {
			editForm.style.display = 'block';
		}

		// Ẩn icon và phần thông tin của bài viết khi hiển thị form
		var circleIcon = document.getElementById('circle-icon-' + postId);
		var postInfo = document.getElementById('post-info-' + postId);
		var postOptions = document.getElementById('post-options-' + postId);

		if (circleIcon) {
			circleIcon.style.display = 'none';
		}
		if (postInfo) {
			postInfo.style.display = 'none';
		}
		if (postOptions) {
			postOptions.style.display = 'none';
		}
	}

	function hideEditForm(postId) {
		// Ẩn form chỉnh sửa khi người dùng nhấn nút Hủy
		var editForm = document.getElementById('editForm-' + postId);
		if (editForm) {
			editForm.style.display = 'none';
		}

		// Hiển thị lại icon và phần thông tin của bài viết khi ẩn form
		var circleIcon = document.getElementById('circle-icon-' + postId);
		var postInfo = document.getElementById('post-info-' + postId);
		var postOptions = document.getElementById('post-options-' + postId);

		if (circleIcon) {
			circleIcon.style.display = 'flex'; // Đặt lại display thành flex
		}
		if (postInfo) {
			postInfo.style.display = 'flex'; // Đặt lại display thành flex
		}
		if (postOptions) {
			postOptions.style.display = 'flex'; // Đặt lại display thành flex
		}
	}
</script>@*form sửa*@

<script>
	const iconButtons = document.querySelectorAll('.icon'); // Chọn tất cả các phần tử có class "icon"

	iconButtons.forEach((iconButton) => {
		const optionsMenu = iconButton.nextElementSibling; // Menu liền kề với icon

		// Sự kiện click để hiển thị hoặc ẩn menu
		iconButton.addEventListener('click', (event) => {
			event.stopPropagation();

			// Đóng tất cả các menu trước khi mở menu của icon hiện tại
			document.querySelectorAll('.options-menu').forEach(menu => {
				menu.style.display = 'none';
			});

			// Chuyển đổi hiển thị của menu liền kề
			optionsMenu.style.display = optionsMenu.style.display === 'none' || optionsMenu.style.display === '' ? 'block' : 'none';
		});
	});

	// Đóng menu nếu nhấp ra ngoài
	document.addEventListener('click', () => {
		document.querySelectorAll('.options-menu').forEach(menu => {
			menu.style.display = 'none';
		});
	});
</script>@*option xóa & sửa*@

<script>
	function expandContent() {
		const expandableForm = document.getElementById('expandable-form');
		const uploadPostForm = document.getElementById('uploadpost');
		const notifyText = document.querySelector('.notify-text'); // Dòng thông báo
		const circleIcon = document.querySelector('.circle-icon'); // Icon hình tròn
		const Icon = document.querySelector('.icon');

		expandableForm.style.display = 'block'; // Hiện form
		uploadPostForm.style.display = 'block'; // Hiện toàn bộ form
		notifyText.style.display = 'none'; // Ẩn dòng text
		circleIcon.style.display = 'none'; // Ẩn icon hình tròn
		Icon.style.display = 'none';
	}

	function cancelInput() {
		const expandableForm = document.getElementById('expandable-form');
		const uploadPostForm = document.getElementById('uploadpost');
		const notifyText = document.querySelector('.notify-text'); // Dòng thông báo
		const circleIcon = document.querySelector('.circle-icon'); // Icon hình tròn
		const Icon = document.querySelector('.icon');

		expandableForm.style.display = 'none'; // Hiện form
		uploadPostForm.style.display = 'none'; // Hiện toàn bộ form
		notifyText.style.display = 'block'; // Ẩn dòng text
		circleIcon.style.display = 'flex'; // Ẩn icon hình tròn
		Icon.style.display = 'flex';
	}

	function checkInput() {
		const titleInput = document.getElementById('titleInput').value.trim();
		const contentInput = document.getElementById('inputText').value.trim();
		const submitButton = document.getElementById('submitButton');

		if (titleInput === '' && contentInput === '') {
			submitButton.disabled = true;
			submitButton.classList.remove('active-button');
			submitButton.classList.add('disabled-button');
		} else {
			submitButton.disabled = false;
			submitButton.classList.remove('disabled-button');
			submitButton.classList.add('active-button');
		}
	}
	

	function submitInput() {
		document.getElementById('uploadpost').submit();
	}
</script>@*post*@

<script>
	function openTab(evt, tabName) {
		var i, tabcontent, tablinks;
		tabcontent = document.getElementsByClassName("tabcontent");
		tablinks = document.getElementsByClassName("tab");

		// Kiểm tra nếu tab hiện tại đang mở
		var currentOpenTab = document.querySelector(".tabcontent[style='display: block;']");
		if (currentOpenTab && currentOpenTab.id === tabName) {
			// Nếu tab đã mở và nhấp lại thì đóng tab đó và hiện tab 'mainload'
			currentOpenTab.style.display = "none";
			document.getElementById('mainload').style.display = "block";
			evt.currentTarget.classList.remove("active");
		} else {
			// Ẩn tất cả các tab trước
			for (i = 0; i < tabcontent.length; i++) {
				tabcontent[i].style.display = "none";
			}
			// Loại bỏ class 'active' từ tất cả các tablinks
			for (i = 0; i < tablinks.length; i++) {
				tablinks[i].classList.remove("active");
			}
			// Hiển thị tab được chọn và thêm class 'active'
			document.getElementById(tabName).style.display = "block";
			evt.currentTarget.classList.add("active");
		}
	}

	document.addEventListener("DOMContentLoaded", function () {
		openTab(event, 'mainload'); // Mở tab mainload khi tải trang
	});

</script> @* Chuy?n tab trên trang *@
<script>
	function reloadLecture() {
		var xhr = new XMLHttpRequest();
		xhr.open('GET', '/ClassRooms/GetLecture?ClassId=' + encodeURIComponent(document.getElementById('classIdInput').value), true);
		xhr.onload = function () {
			if (xhr.status === 200) {
				// L?y d? li?u m?i t? ph?n h?i AJAX
				var newData = xhr.responseText;

				// C?p nh?t n?i dung c?a ph?n t? trên trang web
				document.getElementById('lectureContainer').innerHTML = newData;
			} else {
				// X? lý l?i
				console.error('Error:', xhr.statusText);
			}
		};
		xhr.send();
	}
</script> @* T?o bài gi?ng m?i *@
<script src="https://apis.google.com/js/api.js"></script>
<script>
	function validateAndSubmit(requiredFormat, assignmentId, event) {
		event.preventDefault(); // Ngan ch?n hành d?ng m?c d?nh c?a s? ki?n submit form

		var form = event.target; // L?y bi?u m?u t? s? ki?n
		var fileInput = form.querySelector("input[type='file']");
		var fileName = fileInput.value;

		if (requiredFormat.toLowerCase() === 'allfile') {
			// N?u tùy ch?n "allfile" du?c ch?n, không c?n ki?m tra d?nh d?ng file
			if (fileName === '') {
				// N?u không ch?n file, hi?n th? thông báo l?i
				alert("Vui lòng ch?n m?t file d? n?p.");
				return false; // Ngan form du?c g?i di
			}
			// N?u dã ch?n file, cho phép form du?c g?i di
			form.submit(); // G?i form di
		} else {
			// Ki?m tra d?nh d?ng file n?u không ph?i là "allfile"
			var fileExtension = fileName.split('.').pop().toLowerCase();
			// Ki?m tra xem d?nh d?ng file có phù h?p không
			if (fileExtension === requiredFormat.toLowerCase()) {
				// N?u dúng d?nh d?ng, ti?n hành n?p bài
				form.submit(); // G?i form di
			} else {
				// N?u không dúng d?nh d?ng, hi?n th? thông báo l?i
				alert("Định dạng file không đúng. Vui lòng chọn file có định dạng " + requiredFormat);
			}
		}
	}



	function previewFile(assignmentId) {
		var fileInput = document.getElementById('FileInput_' + assignmentId);
		var file = fileInput.files[0];
		var fileURL = URL.createObjectURL(file);
		window.open(fileURL, '_blank');
	}
</script> @* N?p bài t?p theo d?nh d?ng file yêu c?u *@
<script>
	function Showtaobaitap() {
		var uploadButton = document.getElementById("uploadButton");
		uploadButton.style.display = "none"; // ?n button khi form du?c hi?n th?

		var uploadForm = document.getElementById("uploadbaitap");
		uploadForm.style.display = "block"; // Hi?n th? form khi nút du?c nh?n

		// Hi?n th? ph?n nh?p tiêu d?
		var titleInput = document.getElementById("titleInput");
		titleInput.style.display = "block";

		// Hi?n th? ph?n nh?p mô t?
		var descriptionInput = document.getElementById("descriptionInput");
		descriptionInput.style.display = "block";

		var attachmentForm = document.getElementById("attachmentForm");
		attachmentForm.style.display = "block"; // Hi?n th? form dính kèm
	}

</script> @* T?o bài t?p m?i *@
<script>
	async function calculateChunkHash(chunk) {
		const arrayBuffer = await chunk.arrayBuffer();
		const wordArray = CryptoJS.lib.WordArray.create(arrayBuffer);
		return CryptoJS.SHA256(wordArray).toString();
	}

	async function calculateFileHash(file) {
		const chunkSize = 10 * 1024 * 1024; // 10 MB
		const chunkCount = Math.ceil(file.size / chunkSize);
		const sha256 = CryptoJS.algo.SHA256.create();

		for (let i = 0; i < chunkCount; i++) {
			const start = i * chunkSize;
			const end = Math.min(start + chunkSize, file.size);
			const chunk = file.slice(start, end);
			const arrayBuffer = await chunk.arrayBuffer();
			const wordArray = CryptoJS.lib.WordArray.create(arrayBuffer);
			sha256.update(wordArray);
		}

		return sha256.finalize().toString();
	}

	function showModal() {
		const modal = document.getElementById('uploadModal');
		const backdrop = document.getElementById('modalBackdrop');
		modal.classList.add('show');
		backdrop.classList.add('show');
	}

	function hideModal() {
		const modal = document.getElementById('uploadModal');
		const backdrop = document.getElementById('modalBackdrop');
		modal.classList.remove('show');
		backdrop.classList.remove('show');
	}

	function showSuccessMessage() {
		const progressText = document.getElementById('progressText');
		const successText = document.getElementById('successText');
		progressText.style.display = 'none';
		successText.style.display = 'block';
	}

	function resetProgress() {
		const progressText = document.getElementById('progressText');
		const successText = document.getElementById('successText');
		const progressBar = document.getElementById('progressBar');
		const loader = document.getElementById('loader');
		loader.style.display = 'block';
		progressBar.style.display = 'none';


		progressBar.value = 0;
		progressText.innerText = '0%';
		progressText.style.display = 'block';
		successText.style.display = 'none';
	}


	async function uploadFile() {
		const attactURL = document.getElementById('attactURL');
		const fileInput = document.getElementById('fileInput');
		const file = fileInput.files[0];
		if (!file) {
			alert('Please select a file.');
			return;
		}


		showModal();

		const fileHash = await calculateFileHash(file);
		console.log('File hash:', fileHash); // Log the file hash

		const showProgress = document.getElementById('progressBar');
		const loader = document.getElementById('loader');
		loader.style.display = 'none';
		showProgress.style.display = 'block';

		const chunkSize = 10 * 1024 * 1024; // 10 MB
		const chunkCount = Math.ceil(file.size / chunkSize);
		let uploadedChunks = 0;

		function updateProgress(uploadedChunks, chunkCount) {
			const percentage = (uploadedChunks / chunkCount) * 100;
			document.getElementById('progressBar').value = percentage;
			document.getElementById('progressText').innerText = `${percentage.toFixed(2)}%`;
		}

		async function uploadChunk(chunk, index, fileName) {
			const chunkHash = await calculateChunkHash(chunk);
			return new Promise((resolve, reject) => {
				const xhr = new XMLHttpRequest();
				xhr.open('POST', '/ClassRooms/UploadChunk', true);
				xhr.onload = function () {
					if (xhr.status === 200) {
						uploadedChunks++;
						updateProgress(uploadedChunks, chunkCount);
						resolve();
					} else {
						reject(new Error(`Error uploading chunk: ${xhr.responseText}`));
					}
				};
				xhr.onerror = function () {
					reject(new Error('Network error while uploading chunk'));
				};

				const formData = new FormData();
				formData.append('chunk', chunk);
				formData.append('index', index);
				formData.append('fileName', fileName);
				formData.append('chunkHash', chunkHash);
				xhr.send(formData);
			});
		}

		async function uploadChunks() {
			for (let i = 0; i < chunkCount; i++) {
				const start = i * chunkSize;
				const end = Math.min(start + chunkSize, file.size);
				const chunk = file.slice(start, end);
				try {
					await uploadChunk(chunk, i, file.name);
				} catch (error) {
					console.error(error);
					alert('Error uploading file. Please try again.');
					return;
				}
			}
			completeUpload(file.name, fileHash);
		}

		function completeUpload(fileName, fileHash) {
			const xhr = new XMLHttpRequest();
			xhr.open('POST', '/ClassRooms/CompleteUpload', true);
			xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
			xhr.onload = function () {
				if (xhr.status === 200) {
					attactURL.value = fileName;

						showSuccessMessage();
						setTimeout(hideModal, 2000);
						setTimeout(resetProgress, 3000);

				} else {
					console.error('Error completing upload:', xhr.responseText);
				}
			};
			xhr.onerror = function () {
				console.error('Network error while completing upload');
			};

			const request = JSON.stringify({ fileName: fileName, fileHash: fileHash });
			xhr.send(request);
		}

		uploadChunks();
	}
</script> @*Upload file lớn*@
<script>
	// L?ng nghe s? ki?n khi ngày deadline thay d?i
	document.getElementById("deadlineInput").addEventListener("change", function () {
		// L?y giá tr? c?a ngày deadline
		var deadline = this.value;
	});
</script> @* Chọn deadline *@
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/chat.js"></script>
<script src="https://cdn.jsdelivr.net/npm/he@1.2.0/he.min.js"></script>
<script>
	document.addEventListener("DOMContentLoaded", async function () {
		console.log(document.getElementById('FileInput'));  
		const connection = new signalR.HubConnectionBuilder()
			.withUrl("/chathub") 
			.build();

		connection.onclose(function () {
			console.log("SignalR connection closed.");
		});

		connection.start().then(function () {
			console.log("SignalR connected successfully.");
		}).catch(function (err) {
			return console.error("SignalR connection error:", err.toString());
		});
		try {
			var encodedName = "@((await _userManager.GetUserAsync(User)).Name)";
			var decodedName = he.decode(encodedName);
			document.getElementById("userInput").value = (@User.Identity.Name + " _ " + decodedName);
		} catch (error) {
		}
	});

	function encodeHTML(str) {
		var div = document.createElement('div');
		div.appendChild(document.createTextNode(str));
		return div.innerHTML;
	}

	connection.on("ReceiveMessage", function (user, message, fileUrl) {
		var li = document.createElement("li");
		var classId = document.getElementById("classId").value;
		
		const currentTime = new Date();
		const year = currentTime.getFullYear();
		const month = currentTime.getMonth() + 1;
		const day = currentTime.getDate();
		const hours = currentTime.getHours();
		const minutes = currentTime.getMinutes();
		const seconds = currentTime.getSeconds();
		const formatTime = `${hours}:${minutes}:${seconds} - ${day}/${month}/${year}`;

		var encodedUser = encodeHTML(user);
		var encodedMessage = encodeHTML(message);

		var nameElement = document.createElement("h3");
		nameElement.style.cssText = "font-size: 18px; font-weight: 600; margin: 0;";
		nameElement.textContent = encodedUser;

		var messageElement = document.createElement("p");
		messageElement.style.cssText = "font-size: 17px; margin: 0;";
		messageElement.textContent = encodedMessage;

		var timeElement = document.createElement("p");
		timeElement.style.cssText = "font-size: 13px; margin-top: 5px; margin: 0;";
		timeElement.textContent = `(${formatTime})`;

		if (fileUrl) {
			var fileLink = document.createElement("a");
			fileLink.href = fileUrl;
			fileLink.target = "_blank";
			fileLink.textContent = "[Open File]";
			messageElement.appendChild(fileLink);
		}

		var messageBox = document.createElement("div");
		messageBox.classList.add("message-box");
		messageBox.appendChild(nameElement);
		messageBox.appendChild(messageElement);
		messageBox.appendChild(timeElement);

		var userInput = document.getElementById("userInput").value;
		if (encodedUser === userInput) {
			// Nếu người gửi là người hiện tại, hiển thị bên trái (current-user)
			messageBox.classList.add("current-user");
		} else {
			// Nếu người gửi là người khác, hiển thị bên phải (other-user)
			messageBox.classList.add("other-user");
		}

		li.appendChild(messageBox);

		var messagesList = document.getElementById("messagesList");
		messagesList.appendChild(li);

		messagesList.scrollTop = messagesList.scrollHeight;
	});
	function getCurrentTime() {
		const currentTime = new Date();
		const year = currentTime.getFullYear();
		const month = currentTime.getMonth() + 1;
		const day = currentTime.getDate();
		const hours = currentTime.getHours();
		const minutes = currentTime.getMinutes();
		const seconds = currentTime.getSeconds();
		return `${hours}:${minutes}:${seconds} - ${day}/${month}/${year}`;
	}

	function getClassId() {
		return document.getElementById("classId").value;
	}
	
	async function sendMessage() {
		var user = document.getElementById("userInput").value;
		var message = document.getElementById("messageInput").value;
		var classId = document.getElementById("classId").value;
		var formatTime = getCurrentTime(); 
		var FileInput = document.getElementById("FileInput");
		var fileUrl = null;

		if (FileInput.files.length > 0) {
			var file = FileInput.files[0];
			console.log("File đã được chọn:", file.name);

			var formData = new FormData();
			formData.append("file", file); 

			try {
				console.log("Đang gửi file tới API...");
				let response = await fetch('/api/upfilemessage', {
					method: 'POST',
					body: formData
				});

				if (response.ok) {
					fileUrl = await response.text(); 
					console.log("File URL: ", fileUrl);
				} else {
					console.error('Lỗi khi upload file.');
					return;  
				}
			} catch (err) {
				console.error('Lỗi khi gửi file: ' + err.toString());
				return; 
			}
		}
		if (message.trim() !== "" || fileUrl) {
			try {
				await connection.invoke("SendMessage", user, message, formatTime, classId, fileUrl).catch(function (err) {
					console.error("Lỗi khi gửi tin nhắn:", err.toString());
				});

				// Xóa nội dung sau khi gửi
					document.getElementById("messageInput").value = '';
				fileInput.value = '';
				document.getElementById("fileName").textContent = 'Không có tệp nào được chọn';  // Cập nhật tên file sau khi gửi
			} catch (err) {
				console.error("Lỗi khi gửi tin nhắn:", err.toString());
			}
		}
	}

	document.getElementById('FileInput').addEventListener('change', function () {
		var fileInput = document.getElementById('FileInput');
			var fileNameSpan = document.getElementById('messageInput');

		console.log(fileInput);

		if (fileInput.files.length > 0) {
        const fileName = fileInput.files[0].name; // Lấy tên file
        console.log('File đã được chọn:', fileName);

        // Hiển thị tên file trong khung nhập tin nhắn
			if (messageInput.value.trim() === '') {
				messageInput.value = fileName; // Nếu khung trống, hiển thị tên file
			} else {
				messageInput.value += ` [${fileName}]`; // Nếu có nội dung, thêm tên file vào sau
			}
		} else {
			console.log('Không có file nào được chọn.');
		}
	});


	document.getElementById("sendButton").addEventListener("click", async function (event) {
		await sendMessage();  
	});

	document.getElementById("messageInput").addEventListener("keydown", async function (event) {
		if (event.key == 'Enter' && !event.shiftKey) {
			event.preventDefault();
			var user = document.getElementById("userInput").value;
				var message = document.getElementById("messageInput").value;

			const currentTime = new Date();
			const year = currentTime.getFullYear();
			const month = currentTime.getMonth() + 1;
			const day = currentTime.getDate();
			const hours = currentTime.getHours();
			const minutes = currentTime.getMinutes();
			const seconds = currentTime.getSeconds();
			const formatTime = `${hours}:${minutes}:${seconds} - ${day}/${month}/${year}`;
			var classId = document.getElementById("classId").value;

			if (message.trim() !== "") {
				await connection.invoke("SendMessage", user, message, formatTime, classId).catch(function (err) {
					return console.error(err.toString());
				});
					document.getElementById("messageInput").value = '';
					document.getElementById("messageInput").focus();
			}

			await sendFile();
		}
	});

	connection.on("ReceiveFile", function (user, downloadText, fileUrl) {
		var li = document.createElement("li");
		var formattedMessage = `<strong>${user}:</strong> <a href="${fileUrl}" download>${downloadText}</a>`;
		li.innerHTML = formattedMessage;
		document.getElementById("messagesList").appendChild(li);

	});
		

</script> @* G?i tin nh?n *@
<script>
		function getListSV() {
		var classId = document.getElementById("classId").value;
		$.ajax({
			url: '/ClassRooms/GetListSV?classId=' + classId,
			type: 'GET',
			dataType: 'json',
			success: function (response) {
				if (response.success) {
					displaySV(response.students);
				} else {
					console.error('Error fetching student list:', response.error);
				}
			},
			error: function (xhr, status, error) {
				console.error('Error fetching student list:', error);
			}
		});
	}

	function displaySV(students) {
		const listContainer = document.getElementById("listsv2");
		const template = document.getElementById("student-template");

		// Duyệt qua danh sách sinh viên
		students.forEach(function (student) {
			// Clone template
			const studentCard = template.cloneNode(true);
			studentCard.style.display = "flex"; // Hiển thị
			studentCard.id = ""; // Xóa ID để tránh trùng lặp

			// Điền thông tin sinh viên
			studentCard.querySelector(".student-avatar").src = `/Imgs_avtUser/${student.urlAvt}`;
			studentCard.querySelector(".student-avatar").alt = `Avatar của ${student.name}`;
			studentCard.querySelector(".student-info").textContent = `${student.name} - ${student.mssv}`;

			// Gắn sự kiện cho biểu tượng ba chấm
			studentCard.querySelector(".three-dots-icon_discuss").setAttribute(
				"onclick",
				`openPopup('${student.name}', '${student.mssv}', '${student.email}', '${student.urlAvt}')`
			);

			// Thêm sinh viên vào danh sách
			listContainer.appendChild(studentCard);
		});
	}

	
	$(document).ready(function () {
		getListSV();
	});

	function openPopup(name, mssv, email, urlAvt) {
		document.getElementById("student-name").textContent = name;
		document.getElementById("student-mssv").textContent = mssv;
		document.getElementById("student-email").textContent = email;

		const imageElement = document.getElementById("student-image");
		imageElement.src = `/Imgs_avtUser/${urlAvt}`;
		imageElement.alt = `Image of ${name}`;

		document.getElementById("popup").style.display = "block";
	}
	

	// Hàm đóng popup khi nhấn vào nút "X"
	function closePopup() {
		document.getElementById("popup").style.display = "none";
	}



	
</script>@*chọn nhóm*@

<script>
	// Sự kiện khi trang được kích hoạt lại (quay lại tab)
	document.addEventListener('visibilitychange', function () {
		if (document.visibilityState === 'visible') {
			console.log("Trang đã được kích hoạt lại.");
			// Thực hiện cập nhật giao diện nếu cần thiết
		}
	});

	// Sự kiện khi cửa sổ lấy lại sự tập trung
	window.addEventListener('focus', function () {
		console.log("Trang đã được lấy lại sự tập trung.");
		// Cập nhật lại giao diện nếu cần
	});
	window.addEventListener('focus', function () {
		console.log("Trang đã được lấy lại sự tập trung.");
		var messagesList = document.getElementById("messagesList");
		if (messagesList) {
			// Buộc cập nhật lại danh sách tin nhắn
			messagesList.style.display = 'none';
			setTimeout(function () {
				messagesList.style.display = 'block';
			}, 10);
		}
	});

</script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>
	function getListStudents() {
		var classId = document.getElementById("classId").value;
		$.ajax({
			url: '/ClassRooms/GetListSV?classId=' + classId,
			type: 'GET',
			dataType: 'json',
			success: function (response) {
				if (response.success) {
					displayStudents(response.students);
				} else {
					console.error('Error fetching student list:', response.error);
				}
			},
			error: function (xhr, status, error) {
				console.error('Error fetching student list:', error);
			}
		});
	}

	function displayStudents(students) {
		var listHtml = '<ul style="width: 100%; display: flex; flex-direction: column; align-items: center; padding: 0;">';
		var tongslsv = students.length;
		listHtml += '<p style = "margin-left: auto; font-weight: bold;">Sĩ số : ' + tongslsv + ' sinh viên</p>';
		listHtml += '<hr style = "width: 100%; border: 1px solid orange; margin-top: 0;">'

		listHtml += '<li style="width: 100%; display: flex; justify-content: space-between; align-items: center; padding: 0;">';
		listHtml += '<div style="width: 50%;">' + '</div>';
		listHtml += '<ul style="width: 50%; padding: 0;">';
		students.forEach(function (student, index) {
			listHtml += '<li style="display: flex; align-items: center; margin-bottom: 20px; padding: 0;">';
			listHtml += '<img src="/Imgs_avtUser/' + student.urlAvt + '" alt="No Image" style="width: 50px; height: 50px; border-radius: 50%; margin-right: 20px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); object-fit: cover;"/>';
			listHtml += '<div style="flex: 1;">' + '<p style="margin: 0; min-width: 0;">' + student.mssv + '_' + student.name + '</p>' + '</div>';
			listHtml += '</li>';

			// Ki?m tra n?u không ph?i là th? li cu?i cùng
			if (index !== students.length - 1) {
				listHtml += '<hr style="width: 80%; border: 0; border-top: 1px solid grey; margin-top: 0; margin-left: -45px;">';
			}
		});
		listHtml += '</ul>';
		listHtml += '<div style="width: 25%;">' + '</div>';
		listHtml += '</li>';
		listHtml += '</ul>';
		$('#listsv1').html(listHtml);
	}


	$(document).ready(function () {
		getListStudents();
	});
</script> @* L?y dssv trong l?p và hi?n th? lên *@
<script>
	function updateDateTime() {
		var currentDateTime = new Date();
		var hours = currentDateTime.getHours();
		var minutes = currentDateTime.getMinutes();
		var seconds = currentDateTime.getSeconds();
		var day = currentDateTime.getDate();
		var month = currentDateTime.getMonth() + 1; // Tháng b?t d?u t? 0
		var year = currentDateTime.getFullYear();
		var weekday = currentDateTime.getDay();

		hours = (hours < 10) ? "0" + hours : hours;
		minutes = (minutes < 10) ? "0" + minutes : minutes;
		seconds = (seconds < 10) ? "0" + seconds : seconds;

		day = (day < 10) ? "0" + day : day;
		month = (month < 10) ? "0" + month : month;

		var weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
		var weekdayName = weekdays[weekday];

		// Ð?nh d?ng th?i gian
		var formattedDateTime = weekdayName + " • " + day + "/" + month + "/" + year + " " + hours + ":" + minutes + ":" + seconds;

		// Hi?n th? th?i gian
		document.getElementById("currentDateTime").innerText = formattedDateTime;
	}

	// C?p nh?t th?i gian m?i giây
	setInterval(updateDateTime, 1000);

	// G?i hàm updateDateTime l?n d?u tiên d? hi?n th? th?i gian ngay t? khi trang du?c t?i
	updateDateTime();
</script> @* T?o d?ng h? *@
<script>
	const btnCopy = document.getElementById("btnCopy");
	const input = document.getElementById("contentcopy");
	const icon = document.getElementById("icon");

	btnCopy.addEventListener('click', async () => {
		if (!input.value) {
			return;
		}

		try {
			await navigator.clipboard.writeText(input.value);
			console.log('Text copied to clipboard');
			icon.textContent = 'check_circle';  // Change icon to check mark
			setTimeout(() => {
				icon.textContent = 'content_copy';  // Revert back to copy icon after 2 seconds
			}, 2000);
		} catch (err) {
			console.error('Failed to copy text: ', err);
		}
	});
</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
	$(document).ready(function () {
		$('#diemDanhBtn').on('click', function (event) {
			event.preventDefault(); // Prevent the default link action
			var classId = document.getElementById("classId").value;
			var roomOnlineUrl = $(this).attr('href');
			

			$.post("/ClassRooms/DiemDanhIn", { classId: classId }, function (data) {
				if (data.success) {
					console.log('Điểm danh thành công');
					window.open(roomOnlineUrl, '_blank');
				}
				else {
					console.log(data.error);
					alert(data.error);
					console.log('Điểm danh thất bại');
				}
			});
		});
	});
</script> @* Ði?m danh *@
<script src="~/js/resumable.js"></script>
<script>
	// Tạo đối tượng Resumable.js
	var r = new Resumable({
		target: '/upload',
		chunkSize: 1 * 1024 * 1024, // 1MB mỗi chunk
		simultaneousUploads: 3,
		testChunks: true,
		throttleProgressCallbacks: 1,
		query: {} // Thêm tham số sau khi người dùng chọn thư mục
	});
	// Biến để theo dõi trạng thái tên file
	var fileNameSet = false;

	// Hàm gán sự kiện cho button
	function setupBrowseButton(buttonId, folderType) {
		var button = document.getElementById(buttonId);
		var classId = document.getElementById("classId").value;
		r.assignBrowse(button); // Gán sự kiện chọn file cho button

		button.addEventListener('click', function () {
			// Đặt thư mục
			r.opts.query.folderType = folderType;
			r.opts.query.ClassId = classId;

			// Nếu là BAIGIANG và chưa nhập tên file
			if (folderType === 'BAIGIANG' && !fileNameSet) {
				var customFileName = prompt("Nhập tên file cho BAIGIANG:");
				if (customFileName) {
					r.opts.query.fileName = customFileName; // Đặt tên file
					fileNameSet = true; // Đánh dấu là đã nhập tên
				} else {
					alert("Tên file không thể để trống. Upload bị hủy."); // Thông báo nếu không nhập tên
					return; // Dừng hàm nếu không có tên
				}
			}
		});

		// Lắng nghe sự kiện khi file được thêm và bắt đầu upload
		r.on('fileAdded', function (file) {
			console.log('Bắt đầu upload file:', file.fileName);
			r.upload(); // Bắt đầu upload
		});
	}

	// Hàm để reset tên file
	function resetFileName() {
		r.opts.query.fileName = null; // Reset tên file
		fileNameSet = false; // Đặt lại trạng thái
	}

	// Gọi hàm reset khi cần, ví dụ: thêm một nút reset

	// Thiết lập các button

	setupBrowseButton('browseBaiGiang', 'BAIGIANG');

	// Lắng nghe tiến trình upload
	r.on('fileProgress', function (file) {
		var progress = Math.floor(file.progress() * 100); // Sử dụng file.progress() thay vì r.progress()
		document.getElementById('progressBar').innerText = 'Tiến trình: ' + progress + '%';
	});

	// Xử lý khi hoàn thành upload
	r.on('fileSuccess', function (file, message) {
		console.log('Hoàn thành upload file:', file.fileName);
		resetFileName()
		reloadLecture()
	});

	// Xử lý lỗi
	r.on('fileError', function (file, message) {
		console.error('Lỗi khi upload file:', file.fileName, message);
	});
</script> @*Truyền file lớn BAIGIANG*@
<script>
	function startSpeechRecognition() {
		// Kiểm tra nếu trình duyệt hỗ trợ API Nhận dạng giọng nói
		const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

		if (!SpeechRecognition) {
			alert("Trình duyệt của bạn không hỗ trợ tính năng nhận dạng giọng nói");
			return;
		}

		const recognition = new SpeechRecognition(); // Tạo một đối tượng nhận dạng giọng nói
		recognition.lang = 'vi-VN'; // Thiết lập ngôn ngữ là tiếng Việt

		recognition.onresult = function (event) {
			const transcript = event.results[0][0].transcript; // Lấy văn bản từ kết quả nhận dạng
			document.getElementById('messageInput').value = transcript; // Đưa văn bản vào thẻ input
			console.log(transcript);
		};

		recognition.start(); // Bắt đầu nhận dạng giọng nói từ microphone
	}
</script>@*Voice to text*@
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
	function toggleLeaveRequestForm() {
		const formContainer = document.getElementById('leaveRequestFormContainer');
		if (formContainer.style.display === 'none' || formContainer.style.display === '') {
			formContainer.style.display = 'block'; // Show the form
		} else {
			formContainer.style.display = 'none';  // Hide the form
		}
	}

// Hàm để gán giá trị mặc định cho ngày bắt đầu và ngày kết thúc
    function setDefaultDates() {
        const today = new Date();
        const tomorrow = new Date(today);
        tomorrow.setDate(today.getDate() + 1); // Cộng thêm 1 ngày để lấy ngày mai

        // Định dạng ngày theo chuẩn yyyy-mm-dd
        const todayStr = today.toISOString().split('T')[0];
        const tomorrowStr = tomorrow.toISOString().split('T')[0];

        document.getElementById("StartDate").value = todayStr; // Đặt giá trị mặc định cho ngày bắt đầu
        document.getElementById("StartDate").setAttribute("min", todayStr); // Chặn các ngày trước hôm nay

        document.getElementById("EndDate").value = tomorrowStr; // Đặt giá trị mặc định cho ngày kết thúc (ngày mai)
        document.getElementById("EndDate").setAttribute("min", todayStr); // Chặn các ngày trước hôm nay
    }

    // Gọi hàm này khi trang được load để thiết lập giá trị mặc định ban đầu
    document.addEventListener("DOMContentLoaded", function() {
        setDefaultDates(); // Gán giá trị mặc định
    });

    // Đoạn mã để reset form và giữ lại ngày mặc định
    $('#leaveRequestForm').on('reset', function() {
        setTimeout(function() {
            setDefaultDates(); // Gán lại giá trị mặc định sau khi form được reset
        }, 0); // Đợi form reset xong, rồi mới gán lại giá trị
    });

function submitLeaveRequest(event) {
    event.preventDefault();

    // Create FormData object
    const formData = new FormData();

    // Get form values and append to FormData
    formData.append('ClassRoomId', document.getElementById('ClassId').value);
    formData.append('UserID', document.getElementById('UserID').value);
    formData.append('StartDate', document.getElementById('StartDate').value);
    formData.append('EndDate', document.getElementById('EndDate').value);
    formData.append('Reasion', document.getElementById('Reason').value);

    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

    // Use Axios to send a POST request with FormData
    axios.post('/LeaveRequests/Create', formData, {
        headers: {
            'RequestVerificationToken': token,
            'Content-Type': 'multipart/form-data' // Important for sending FormData
        }
    })
    .then(function (response) {
        if (response.data.success) {
            alert(response.data.message);
			$('#leaveRequestForm')[0].reset();
			toggleLeaveRequestForm(); // Hide the form on success
			getAllLeaveRequests();
        }
    })
    .catch(function (error) {
        if (error.response && error.response.status === 400) {
            alert('Validation errors: ' + error.response.data.errors.join(', '));
        } else {
            alert('An error occurred: ' + error.message);
        }
    });
}

	function getAllLeaveRequests() {
		const classId = document.getElementById('ClassId').value;
		const userId = document.getElementById('UserID').value;
		const isOwner = '@Model.isOwner';
		let params = { classId: classId, userId: userId, isOwner: isOwner }
		axios.get('/LeaveRequests/GetAllLeaveRequestByUserId', { params })
			.then(function (response) {
				const leaveRequests = response.data;
				const leaveRequestsContainer = document.getElementById('leaveRequestsList');
				leaveRequestsContainer.innerHTML = ''; // Clear previous data

				leaveRequests.forEach(request => {
					// Create a column wrapper for the card
					const col = document.createElement('div');
					col.classList.add('col-md-3', 'col-sm-6', 'mb-3'); // 4 cards per row on medium+ and 2 on small screens

					// Create the card and append it to the column
					const card = createLeaveRequestCard(request);
					col.appendChild(card);

					// Append the column (with the card) to the row container
					leaveRequestsContainer.appendChild(col);
				});
			})
			.catch(function (error) {
				console.error('An error occurred while fetching leave requests:', error);
			});
	}

	function createLeaveRequestCard(request) {
		const card = document.createElement('div');
		card.classList.add('card', 'h-100', 'position-relative'); // Ensure cards are equal height

		// Set the background color based on status
		if (request.status === 0) {
			card.style.backgroundColor = 'yellow'; // Background color for status 0
		} else if (request.status === 1) {
			card.style.backgroundColor = 'lightgreen'; // Background color for status 1
		} else if (request.status === -1) {
			card.style.backgroundColor = 'lightcoral'; // Background color for status -1
		}

		const cardBody = document.createElement('div');
		cardBody.classList.add('card-body');
		let statusMessage;
		switch (request.status) {
			case 0:
				statusMessage = 'Đang chờ duyệt'; // Status 0
				break;
			case 1:
				statusMessage = 'Đã duyệt'; // Status 1
				break;
			case -1:
				statusMessage = 'Đã từ chối'; // Status -1
				break;
			default:
				statusMessage = 'Trạng thái không xác định'; // Fallback for undefined status
		}
		const isOwner = @Model.isOwner.ToString().ToLower(); // Chuyển đổi thành true/false
		const userId = @Html.Raw(Json.Serialize(Model.Owner.Id));
		const currentUserId = @Html.Raw(Json.Serialize(user.Id));

		if (isOwner)
		{
			cardBody.innerHTML = `
				<h5 class="card-title">Lý do: ${request.reasion}</h5>
				<p class="card-text">
					<strong>Họ và tên:</strong> ${request.name}<br/>
					<strong>Ngày bắt đầu:</strong> ${new Date(request.startDate).toLocaleDateString()}<br/>
					<strong>Ngày kết thúc:</strong> ${new Date(request.endDate).toLocaleDateString()}<br/>
					<strong>Trạng thái:</strong> ${statusMessage}<br/>
				</p>`;
			
			if (request.status === 0 && request.userID.trim() !== userId) {

				// Tạo button Duyệt
				const approveButton = document.createElement('button');
				approveButton.textContent = 'Duyệt';
				approveButton.classList.add('btn', 'btn-success', 'mr-2');
				approveButton.onclick = function () {
					updateLeaveRequestStatus(request.id, 1); // 1 cho "Đã duyệt"
				};

				// Tạo button Từ chối
				const rejectButton = document.createElement('button');
				rejectButton.textContent = 'Từ chối';
				rejectButton.classList.add('btn', 'btn-danger');
				rejectButton.onclick = function () {
					updateLeaveRequestStatus(request.id, -1); // -1 cho "Đã từ chối"
				};
				
				// Thêm các nút vào card body
				cardBody.appendChild(approveButton);
				cardBody.appendChild(rejectButton);
				
			}
		}
		else {
			cardBody.innerHTML = `
						<h5 class="card-title">Lý do: ${request.reasion}</h5>
						<p class="card-text">
							<strong>Ngày bắt đầu:</strong> ${new Date(request.startDate).toLocaleDateString()}<br/>
							<strong>Ngày kết thúc:</strong> ${new Date(request.endDate).toLocaleDateString()}<br/>
							<strong>Trạng thái:</strong> ${statusMessage}<br/>
						</p>`;
		}
	

		if (request.status === 0 && request.userID.trim() === currentUserId) {
			// Create a delete button
			const deleteButton = document.createElement('button');
			deleteButton.innerHTML = '&times;'; // This is the "X" character
			deleteButton.classList.add('delete-btn'); // Button styling and positioning
			deleteButton.onclick = function () {
				deleteLeaveRequest(request.id); // Pass the leave request ID to delete function
			};

			card.appendChild(deleteButton);
		}
		card.appendChild(cardBody);
		return card;
	}

	function updateLeaveRequestStatus(requestId, status) {
		axios.put('/LeaveRequests/UpdateStatus', { leaveRequestId: requestId, status: status })
			.then(response => {
				if (response.data.success) {
					console.log('Cập nhật trạng thái thành công!');
					// Cập nhật lại danh sách yêu cầu nghỉ phép nếu cần
					getAllLeaveRequests();
				} else {
					console.error('Có lỗi xảy ra:', response.data.errors);
				}
			})
			.catch(error => {
				if (error.response) {
					console.error('Có lỗi xảy ra khi gọi API:', error.response.data);
				} else {
					console.error('Có lỗi xảy ra:', error);
				}
			});
	}



	document.addEventListener('DOMContentLoaded', function () {
		getAllLeaveRequests(); // Call function when the page loads
	});

	function deleteLeaveRequest(id) {
		// Show a confirmation dialog before deleting
		const confirmation = confirm("Bạn có chắc chắn muốn xoá yêu cầu nghỉ phép này?");
		if (confirmation) {
			// Make an axios call to delete the leave request
			axios.delete(`/LeaveRequests/Delete/${id}`)
				.then(function (response) {
					// Refresh the leave requests list
					getAllLeaveRequests();
				})
				.catch(function (error) {
					console.error('An error occurred while deleting the leave request:', error);
				});
		}
	}


</script> @* Gửi đơn xin nghỉ phép*@


