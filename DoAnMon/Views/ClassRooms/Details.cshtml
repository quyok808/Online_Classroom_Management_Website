@using DoAnMon.IdentityCudtomUser
@using Microsoft.AspNetCore.Identity
@inject ICheckNop CheckNop

@inject UserManager<CustomUser> _userManager
@inject IUserStore<CustomUser> _userStore
@using static DoAnMon.Models.ClassroomViewModel
@model ClassRoomViewModel

@{
	string tenlop = Model.ClassRoom.Name;
	ViewData["Title"] = tenlop;
	Layout = "~/Views/Shared/_Layout.cshtml";
	var user = await _userManager.GetUserAsync(User);

	// T?o đường dẫn cho mã QR
	var qrData = Model.ClassRoom.Id;

	// Tạo mã QR tới dữ liệu
	var writer = new ZXing.BarcodeWriterSvg
			{
				Format = ZXing.BarcodeFormat.QR_CODE,
				Options = new ZXing.QrCode.QrCodeEncodingOptions
				{
					Width = 100,
					Height = 100
				}
			};
	var qrCode = writer.Write(qrData);
}
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js"></script>

<style>
	body {
		font-family: Arial, sans-serif;
		margin: 0;
		padding: 0;
		box-sizing: border-box;
	}

	/* ================================= */

	.tabs {
		overflow: hidden;
		border-bottom: 1px solid #ccc;
	}

	.tab {
		float: left;
		cursor: pointer;
		padding: 14px 16px;
		transition: background-color 0.3s;
	}

	.tab:hover {
		background-color: #ddd;
	}

	.tab.active {
		background-color: #ccc;
	}

	.tabcontent {
		display: none;
		padding: 20px;
		clear: both;
	}

	.posts {
		padding-top: 20px;
	}

	.post {
		border-bottom: 1px solid #ccc;
		padding: 20px 0;
		margin-bottom: 20px;
	}

	.post img {
		max-width: 100%;
		height: auto;
		margin-bottom: 10px;
	}

	.post h2 {
		font-size: 20px;
		margin-bottom: 10px;
	}

	.post p {
		font-size: 16px;
		margin-bottom: 10px;
	}

	.post .author {
		font-style: italic;
		color: #666;
	}

	/* THÔNG TIN GI?NG VIÊN */
	.teacher-info {
		background-color: #f9f9f9;
		padding: 20px;
		border-radius: 10px;
		box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
		/* Thêm bóng d? */
	}

	.teacher-details {
		display: flex;
		align-items: center;
	}

	.teacher-image {
		width: 100px;
		height: 100px;
		border-radius: 50%;
		margin-right: 20px;
		box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
		/* Thêm bóng d? */
		object-fit: cover;
	}

	.teacher-text {
		flex: 1;
	}

	.teacher-text p {
		margin-bottom: 10px;
	}

	.teacher-text p strong {
		font-weight: bold;
		color: #e72323;
	}

	/* POST BÀI GIẢNG */
	.post {
		margin-bottom: 20px;
		padding: 20px;
		background-color: #f9f9f9;
		border-radius: 10px;
		box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
	}

	.post h2 {
		font-size: 24px;
		margin-bottom: 10px;
		text-align: center;
	}

	.pdf-container {
		width: 100%;
		height: 600px;
		overflow: auto;
	}

	.pdf-container object {
		width: 100%;
		height: 100%;
	}

	.pdf-container embed {
		width: 100%;
		height: 100%;
	}

	/* BÀI TẬP */
	.assignment {
		background-color: white;
		padding: 20px;
		border-radius: 20px;
		margin-top: 20px;
		display: flex;
		border: 1px solid #333; /* Thêm vi?n */
	}

	.assignment h3 {
		margin-top: 0;
		margin-bottom: 10px;
	}

	.assignment-description {
		margin-bottom: 20px;
	}

	.file-input-wrapper {
		margin-right: 20px;
	}

	.file-label {
		font-weight: bold;
	}

	.file-input {
		display: none;
	}

	.btn {
		padding: 10px 20px;
		color: #fff;
		border: none;
		border-radius: 5px;
		cursor: pointer;
		transition: background-color 0.3s;
	}

	.btn:hover {
		background-color: #0056b3;
	}

	/* UPLOAD BAITAP */
	.upload-form {
		display: flex;
		flex-direction: column;
		align-items: center;
		margin-bottom: 20px;
	}

	.file-label {
		margin-bottom: 10px;
	}

	.file-input-wrapper {
		width: 100%;
	}

	.file-input {
		width: 100%;
		padding: 10px;
		border: 1px solid #ccc;
		border-radius: 5px;
		background-color: #f9f9f9;
		transition: border-color 0.3s;
		margin: 10px;
	}

	.file-input:focus {
		border-color: #007bff;
		outline: none;
	}

	.btn {
		width: 100%;
		max-width: 200px; /* Ð?m b?o nút không quá r?ng */
	}

	/*======================B?ng di?m======================*/
	.container-bangdiem {
		overflow-x: scroll;
	}

	/* Style for the first column */
	.first-column th:first-child,
	.first-column td:first-child {
		width: 200px; /* Fixed width for the first column */
		white-space: nowrap; /* Prevent wrapping content */
	}

	/* General table styling */
	#user {
		font-family: Arial, Helvetica, sans-serif;
		border-collapse: collapse;
		width: 100%;
		overflow-x: auto; /* Horizontal scroll for small screens */
	}

	#user td,
	#user th {
		border: 1px solid #ddd;
		padding: 8px;
	}

	#user tr:nth-child(even) {
		background-color: #f2f2f2;
	}

	#user tr:hover {
		background-color: #ddd;
	}

	#user th {
		padding-top: 12px;
		padding-bottom: 12px;
		text-align: left;
		background-color: #04AA6D;
		color: white;
	}

	/* T?o button change background */
	.custom-file-upload {
		display: inline-block;
		padding: 10px 20px;
		cursor: pointer;
		background-color: #ffffff; /* Màu n?n */
		color: black; /* Màu ch? */
		border-radius: 5px; /* Bo tròn góc */
		font-size: 16px;
		font-weight: bold;
		transition: background-color 0.3s ease; /* Hi?u ?ng chuy?n d?i màu */
	}

	.custom-file-upload:hover {
		background-color: #E3E1D9; /* Màu n?n khi hover */
	}

	.custom-file-upload:active {
		background-color: #B4B4B8; /* Màu n?n khi click */
	}

	/* Bright Modal */
	.modal {
		display: none;
		position: fixed;
		z-index: 1000;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		width: 100%;
		max-width: 400px;
		background-color: white; /* Bright Modal */
		border-radius: 8px; /* Rounded corners */
		padding: 20px;
	}

	.modal-content {
		padding: 20px;
	}

	.modal-header, .modal-body {
		padding-bottom: 15px;
	}

	.modal-title {
		margin-bottom: 10px;
	}

	.text-center {
		text-align: center;
	}

	progress {
		width: 100%;
		height: 20px;
	}

	/* Dark Background */
	.modal-backdrop {
		display: none;
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.7); /* Dark semi-transparent background */
		z-index: 999; /* Below the modal */
	}

	.modal.show, .modal-backdrop.show {
		display: block;
	}

	/*LOADER*/
	.loader {
		width: 100%;
		height: 10px;
		background: repeating-linear-gradient(-45deg, #766DF4 0 20px,#0000 0 40px) left/200% 100%;
		animation: i3 2s infinite linear;
		border-radius: 10px;
		border: 1px solid #766DF4;
	}

	@@keyframes i3 {
		100% {
			background-position: right
		}
	}

	.d-flex {
		display: flex;
	}

	.gap-2 {
		gap: 10px;
	}

	.delete-btn {
		position: absolute;
		top: 10px;
		right: 10px;
		border: none;
		background: transparent;
		font-size: 30px;
		color: black;
		cursor: pointer;
	}

	.delete-btn:hover {
		color: #ff0000;
	}

	.ctnleaveForm {
		justify-content: flex-start;
		gap: 20px;
	}

	/*thông báo*/
	.notify-text:hover {
		color: black; /* Đổi màu chữ thành đen khi hover */
	}

	.notify-text {
		font-size: 14px;
		color: #7a7575; /* Màu chữ mặc định */
		margin-top: 10px;
		cursor: pointer;
	}

	.input-textarea {
		border: none; /* Bỏ viền mặc định */
		border-bottom: 2px solid transparent; /* Viền dưới ban đầu */
		transition: border-bottom 0.3s ease, background-color 0.3s ease; /* Hiệu ứng chuyển tiếp */
		border-radius: 5px; /* Bo góc */
		background-color: rgb(230, 248, 248); /* Màu nền mặc định */
		resize: none;
	}

	.input-textarea:hover {
		background-color: rgb(141, 250, 250); /* Màu nền khi hover */
	}

	.input-textarea:focus {
		outline: none; /* Bỏ viền mặc định khi focus */
		border-bottom: 2px solid rgb(66, 133, 244); /* Đường viền dưới khi focus */
	}


	/* Nút bị vô hiệu hóa (disabled) */
	.disabled-button {
		background-color: lightgray;
		cursor: not-allowed;
		opacity: 0.6;
	}

	/* Nút kích hoạt bình thường */
	.active-button {
		background-color: rgb(66, 133, 244);
		cursor: pointer;
		color: white;
		opacity: 1;
	}

	/*xóa & sửa*/
	.icon {
		border: none;
		background: none;
		width: 40px;
		height: 40px;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center; /* Màu nền khi hover */
	}

	.icon:hover {
		background-color: rgba(145, 137, 137, 0.2);
	}

	.discussion-container {
		display: flex;
		width: 100%;
		height: 600px;
		font-family: 'JetBrains Mono', serif;
	}

	/* Khung bên trái (kích thước cố định) */
	.left-panel {
		flex: 0 0 400px;
		padding: 20px;
		border: 1px solid #ddd;
		border-radius: 20px;
		box-sizing: border-box;
		margin-right: 20px;
	}

	/* Khung bên phải (co giãn) */
	.right-panel {
		flex: 1;
		display: flex;
		border: 1px solid #ddd;
		border-radius: 20px;
		box-sizing: border-box;
		flex-direction: column;
		position: relative;
	}

	/* Thiết lập form và các thành phần bên trong */
	.input-hidden {
		display: none;
	}

	.message-input-group {
		display: flex;
		align-items: center;
		gap: 10px;
		background-color: #FBEAF0;
		padding: 10px;
		border-bottom-left-radius: 20px;
		border-bottom-right-radius: 20px;
		height: 70px;
	}


	#messageInput {
		flex: 1;
		border-radius: 30px;
		height: 45px;
		padding-left: 10px;
		font-size: 17px;
		border: none;
		outline: none;
	}

	.record {
		background-color: transparent; /* Bỏ màu nền */
		border: none; /* Bỏ đường viền */
		padding: 0; /* Loại bỏ khoảng cách xung quanh */
		cursor: pointer; /* Thêm hiệu ứng con trỏ tay khi hover */
		display: flex;
		align-items: center;
	}


	/* Khung tin nhắn */
	.message-list {
		list-style-type: none;
		margin: 0;
		height: calc(100% - 70px);
		width: 100%;
		overflow-y: auto; /* Hiển thị thanh cuộn dọc nếu nội dung vượt quá chiều cao */
		box-sizing: border-box; /* Đảm bảo padding không tăng kích thước phần tử */
	}

	.message-form {
		position: absolute;
		bottom: 0;
		width: 100%;
	}

	.send-button_discuss {
		background: none;
		border: none;
		cursor: pointer;
		outline: none;
		display: flex;
		align-items: center;
	}

	.send-icon_discuss {
		fill: #ff397f; /* Màu biểu tượng */
		width: 20px;
		height: 20px;
	}

	.image-icon_discuss {
		display: flex;
		align-items: center; /* Canh giữa icon theo chiều dọc */
	}

	.file-label {
		background-color: transparent; /* Bỏ màu nền */
		border: none; /* Bỏ đường viền */
		padding: 0; /* Loại bỏ khoảng cách xung quanh */
		/*cursor: pointer;  Thêm hiệu ứng con trỏ tay khi hover */
		display: flex;
		align-items: center;
		margin: 0;
	}

	.file-name {
		font-family: Poppins, sans-serif;
		font-size: 14px;
		margin-left: 10px;
		color: #6c757d;
		display: inline-block;
		max-width: 350px;
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
		margin-top: 15px;
	}

	.message-box {
		display: inline-block;
		max-width: 763px;
		border-radius: 10px;
		padding: 10px;
		background-color: #FBEAF0;
		margin-left: 15px
	}

	.current-user {
		justify-content: flex-end; /* Hiển thị bên phải cho người khác */
		align-items: flex-end;
		margin-left: auto;
	}

	/* Tin nhắn từ người khác */
	.other-user {
		justify-content: flex-start; /* Hiển thị bên trái cho người hiện tại */
		align-items: flex-start;
	}

	.search-box_discuss {
		width: 100%;
		max-width: 400px;
		margin: 0 auto;
		position: relative;
		font-family: Arial, sans-serif;
	}

	.search-input_discuss {
		width: 90%;
		padding: 10px 15px;
		padding-left: 40px; /* Để chừa chỗ cho biểu tượng tìm kiếm */
		font-size: 16px;
		border: 1px solid #ccc;
		border-radius: 20px;
		outline: none;
		transition: border 0.3s ease;
		margin-top: 20px;
		margin-left: 20px;
		margin-right: 20px;
	}

		.search-input_discuss:focus {
			border-color: #0078ff;
		}

	/* Biểu tượng tìm kiếm */
	.search-icon_discuss {
		position: absolute;
		top: 65%;
		left: 30px;
		transform: translateY(-50%);
		color: #888;
		font-size: 18px;
		pointer-events: none;
	}

	.account-info-container_discuss {
		overflow-y: auto;
		height: 530px;
		width: 400px;
		border-bottom-left-radius: 35px;
		border-bottom-right-radius: 35px;
	}

	.circle-text-container_discuss {
		display: flex;
		align-items: center;
		width: 100%;
		padding: 15px;
		border: none;
		border-radius: 10px;
		background-color: none;
		position: relative;
		transition: background-color 0.3s;
	}

		.circle-text-container_discuss:hover {
			background-color: #E1E1E1;
		}

	.circle_discuss {
		margin-right: 10px; /* Khoảng cách giữa hình tròn và chữ */
	}

	.circle_discuss img {
		width: 90px;
		height: 90px;
		object-fit: cover;
		border-radius: 50%;
	}

	#listsv2 {
		display: flex;
		flex-wrap: wrap;
		gap: 20px;
	}

	.student-card {
		border: 1px solid #ddd;
		border-radius: 8px;
		padding: 10px;
		width: 200px;
		text-align: center;
		box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
	}

	.three-dots-icon_discuss {
		position: absolute;
		top: 10px; /* Đặt ở đầu container */
		right: 10px; /* Khoảng cách từ bên phải */
		cursor: pointer; /* Con trỏ chuột khi hover */
		color: #000000; /* Màu cho biểu tượng ba chấm */
	}

	.star-icon_discuss {
		position: absolute;
		bottom: 10px; /* Khoảng cách từ trên xuống */
		right: 10px; /* Khoảng cách từ bên phải */
		cursor: pointer; /* Con trỏ chuột khi hover */
		color: lightgray; /* Màu vàng cho biểu tượng ngôi sao */
	}

	.popup {
		display: none;
		position: fixed;
		z-index: 1;
		left: 0;
		top: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.4);
		overflow: auto;
		padding-top: 60px;
	}

	/* Nội dung của popup */
	.popup-content {
		background-color: #c7ffd0;
		margin: 5% auto;
		padding: 20px;
		border: 1px solid #888;
		width: 600px;
		border-radius: 20px;
		display: flex;
	}

	/* Nút đóng */
	.popup-close {
		color: black;
		float: right;
		font-size: 30px;
		font-weight: bold;
		margin-left: auto;
		margin-top: -10px;
	}

	.popup-close:hover,
	.popup-close:focus {
		color: red;
		text-decoration: none;
		cursor: pointer;
	}

	.popup-image {
		width: 150px;
		height: 200px;
		margin-right: 40px;
		display: flex;
		justify-content: center;
		align-items: center;
		border-radius: 20px;
		overflow: hidden;
		background-color: #f0f0f0;
		flex-shrink: 0;
	}

	.popup-details p {
		margin: 5px 0;
		line-height: 1.5;
		font-size: 18px;
		font-weight: 600;
	}

	.btn:hover {
		background-color: lightgray;
	}

	.btn-nghiphep {
		background-color: rgb(74, 113, 255);
		color: white;
		border: none;
		border-radius: 8px;
		padding: 5px;
		font-size: 16px;
		font-weight: bold;
		cursor: pointer;
		font-family: 'Itim', serif;
	}

	.btn-nghiphep:hover {
		background-color: #2000ff;
		color: white;
	}

	.card-letter {
		margin-top: 20px;
		border-radius: 20px;
		padding: 20px;
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
		transition: all 0.3s ease;
		position: relative;
	}

	.card-letter:hover {
		transform: translateY(-5px);
	}

	.btn-duyet {
		background-color: #28a745;
		color: white;
		border: none;
		border-radius: 5px;
		padding: 4px 8px;
		margin-right: 10px;
		font-size: 16px;
		font-family: 'Itim', serif;
	}

	.btn-tu-choi {
		background-color: #dc3545;
		color: white;
		border: none;
		border-radius: 5px;
		padding: 4px 8px;
		font-size: 16px;
		font-family: 'Itim', serif;
	}

	.card-text {
		font-size: 16px;
		font-family: 'Itim', serif;
	}

	.card-title {
		font-size: 16px;
		font-family: 'Itim', serif;
		margin-top: 0;
		font-weight: bold;
	}

</style>
<style>
	.container_listsv {
		width: 100%;
		display: flex;
		flex-direction: column;
		align-items: center;
		padding: 0;
		margin-top: -60px;
	}

	.row_listsv {
		width: 100%;
		display: flex;
		justify-content: center;
		flex-wrap: wrap;
		gap: 20px;
		margin-bottom: 20px;
	}

	.card_listsv {
		width: 18%; /* Adjusted for 5 cards per row */
		display: flex;
		flex-direction: column;
		align-items: center;
		padding: 20px;
		border: 1px solid #ddd;
		border-radius: 8px;
		box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
		background-color: #fff;
	}

	.img_listsv {
		width: 80px;
		height: 80px;
		border-radius: 50%;
		margin-bottom: 15px;
		box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
		object-fit: cover;
	}

	.p_listsv {
		margin: 5px 0;
		font-size: 16px;
		font-weight: bold;
		color: #333;
		text-align: center;
	}

	.hr_listsv {
		width: 100%;
		border: 0;
		border-top: 1px solid orange;
	}

	.header_listsv {
		font-weight: bold;
		font-size: 18px;
		margin-left: auto;
	}

	.invite_button {
		margin-top: 10px;
		padding: 10px 15px;
		background-color: orange;
		color: white;
		border: none;
		border-radius: 5px;
		cursor: pointer;
		font-size: 14px;
	}

	.invite_button:hover {
		background-color: darkorange;
	}
</style>
<style>
	.button_btnBaiGiang {
		position: relative;
		width: 10rem;
		height: 3rem;
		cursor: pointer;
		border: none;
		background: none;
	}

	.button_btnBaiGiang svg {
		width: 100%;
		height: 100%;
		overflow: visible;
	}

	.border_btnBaiGiang {
		width: 100%;
		height: 100%;
		stroke: black;
		stroke-width: 2px;
		fill: #0000;
		rx: 1em;
		ry: 1em;
		stroke-dasharray: 25;
		transition: fill 0.25s;
		animation: 4s linear infinite stroke-animation_btnBaiGiang;
	}

	.button_btnBaiGiang:hover .border_btnBaiGiang {
		fill: #0001;
	}

	.button_btnBaiGiang:focus .border_btnBaiGiang {
		transition: fill 0.25s 7.75s;
		fill: #0000;
	}

	@@keyframes stroke-animation_btnBaiGiang {
		0% {
			stroke-dashoffset: 100;
		}

		to {
			stroke-dashoffset: 0;
		}
	}

	.txt-upload_btnBaiGiang {
		position: absolute;
		inset: 0;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.txt-upload_btnBaiGiang::after {
		content: "";
	}

	.button_btnBaiGiang:focus .rect_btnBaiGiang {
		stroke-dasharray: 50;
	}

	.button_btnBaiGiang:focus .border_btnBaiGiang {
		stroke: #0000;
	}

	.button_btnBaiGiang:focus .txt-upload_btnBaiGiang {
		opacity: 0;
		transition: opacity 0.25s 8s;
	}

	.button_btnBaiGiang:focus .txt-upload_btnBaiGiang::after {
		animation: 0.66666s anim_btnBaiGiang step-end forwards, 1.33333s 0.6666s anim2_btnBaiGiang linear infinite alternate;
	}

	@@keyframes anim_btnBaiGiang {
		0% {
			content: "i";
		}

		50% {
			content: "in";
		}

		to {
			content: "ing";
		}
	}

	@@keyframes anim2_btnBaiGiang {
		0% {
			content: "ing";
		}

		33% {
			content: "ing.";
		}

		66% {
			content: "ing..";
		}

		to {
			content: "ing...";
		}
	}

	.loading_btnBaiGiang {
		width: 100%;
		height: 100%;
		stroke: #0055d4;
		stroke-width: 2px;
		fill: none;
		rx: 1em;
		ry: 1em;
		stroke-dasharray: 0 100;
		transition: stroke-dasharray 0.25s ease-out;
	}

	.button_btnBaiGiang:focus .loading_btnBaiGiang {
		transition: stroke 0.5s 7.5s, stroke-dasharray 8s 0.5s ease-out;
		stroke: #08ca08;
		stroke-dasharray: 100 0;
	}

	.done_btnBaiGiang {
		fill: none;
		stroke: #000;
		stroke-dasharray: 0 100;
	}

	.button_btnBaiGiang:focus .done-cloud_btnBaiGiang {
		transition: stroke-dasharray 0.75s 8.5s ease-out;
		stroke-dasharray: 100 0;
	}

	.button_btnBaiGiang:focus .done-check_btnBaiGiang {
		transition: stroke-dasharray 0.5s 9.2s ease-out;
		stroke: #08ca08;
		stroke-dasharray: 100 0;
	}

	/* Trạng thái focus của button */
	.button_btnBaiGiang.focus .txt-upload_btnBaiGiang {
		opacity: 0; /* Ẩn text Upload khi trong trạng thái focus */
	}

	.button_btnBaiGiang.focus .loading_btnBaiGiang {
		stroke-dasharray: 100 0; /* Hiển thị thanh tiến trình */
	}

</style>
<style>
	.custom-file-upload {
		display: inline-block;
		padding: 10px 20px;
		cursor: pointer;
		background-color: #007bff;
		color: white;
		border: none;
		border-radius: 5px;
		font-size: 14px;
	}

	.custom-file-upload:hover {
		background-color: #0056b3;
	}

	#fileInput {
		display: none; /* Ẩn thẻ input gốc */
	}
</style>
<style>
	.ClassroomDetail-container {
		display: flex;
		width: 100%;
		min-height: 600px;
	}

	.ClassroomDetail-left-container {
		margin-left: 20px;
		width: 20%;
		font-family: "JetBrains Mono", serif;
	}

	.list-group-item {
		border: none; /* Loại bỏ viền */
	}

	.list-group-item + .list-group-item {
		border-top: 1px solid #ddd; /* Chỉ giữ lại viền trên */
	}

	.panel-heading {
		font-weight: bold;
		font-size: 15px;
	}

	.IDClass_list-group-item1 {
		align-content: center;
		font-size: 25px;
		font-weight: bold;
		color: red;
		padding-left: 5px;
	}

	.list-group-item1-container {
		display: flex;
		width: 100%;
		height: 100px;
		justify-content: space-around;
	}

	.list-group-item {
		margin: 0;
		padding: 0;
	}

	.padding-custom {
		padding: 10px;
	}

	.custom-VaoPhong {
		display: flex;
		justify-content: center;
		font-weight: bold;
		color: #295F98;
	}

	.custom-VaoPhong:hover {
		text-decoration: none;
	}

	.custom-VaoPhong:active, .custom-VaoPhong:visited, .custom-VaoPhong:focus {
		color: #295F98;
	}

	.ClassroomDetail-right-container {
		width: 80%;
		margin-left: 20px;
		font-family: "JetBrains Mono", serif;
	}

	.searchsv-container {
		width: 100%;
		display: flex;
		justify-content: center;
		margin-bottom: 20px;
	}

	#searchsvInput {
		width: 80%;
		max-width: 600px;
		padding: 12px 20px;
		font-size: 16px;
		border: 1px solid #ccc;
		border-radius: 25px;
		box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
		outline: none;
		transition: all 0.3s ease;
	}

	#searchsvInput:focus {
		border-color: #4CAF50;
		box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);
	}

	.khungtaodontu {
		font-family: 'Itim',serif;
		transform: translate(-50%, -50%);
		top: 50%;
		left: 50%;
		background-color: #dfe1fc;
		padding: 20px;
		border-radius: 8px;
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
		width: 700px;
		text-align: left;
		position: fixed;
		font-size: 16px;
		z-index: 1000;
	}

	.btn-guiyeucau {
		background-color: #007bff;
		color: white;
		font-size: 16px;
		font-weight: bold;
		padding: 7px 10px;
		border: none;
		border-radius: 8px;
		cursor: pointer;
		float: right;
	}

	.btn-taobaitap {
		background-color: #4a71ff;
		font-family: 'Itim',serif;
		color: #ffffff;
		padding: 10px 20px;
		border: none;
		border-radius: 20px;
		cursor: pointer;
		transition: background-color 0.3s;
		font-size: 18px;
		font-weight: bold;
	}

	.khungtaobaitap {
		font-family: 'Itim',serif;
		transform: translate(-50%, -50%);
		top: 50%;
		left: 50%;
		background-color: #dfe1fc;
		padding: 20px;
		border-radius: 8px;
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
		width: 700px;
		text-align: left;
		position: fixed;
		font-size: 16px;
		margin-top: 35px;
	}

	.close-btn {
		background-color: #ff4d4d;
		color: #fff;
		border: none;
		padding: 7px 15px;
		cursor: pointer;
		font-size: 16px;
		margin-top: 20px;
		float: right;
		border-radius: 20px;
	}

	.close-btn:hover {
		background-color: #ff1a1a;
	}

	.giaobai-btn {
		background-color: #4a71ff;
		color: #fff;
		border: none;
		padding: 7px 15px;
		cursor: pointer;
		font-size: 16px;
		margin-top: 20px;
		border-radius: 20px;
	}

	.giaobai-btn:hover {
		background-color: #0022ff;
	}

	.assignment-left-box {
		width: 50%;
	}

	.assignment-middle-box {
		width: 25%;
		text-align: justify;
		padding-left: 20px;
		padding-right: 20px;
	}

	.assignment-right-box {
		width: 50%;
		align-items: center;
		justify-content: center;
		display: flex;
	}

	.divider {
		width: 1px;
		background-color: #333; /* Màu gạch dọc */
	}

	.btn-xoa {
		background-color: #dc3545; /* Màu đỏ */
		color: white;
		border: none;
		padding: 10px;
		border-radius: 5px;
		cursor: pointer;
		transition: 0.3s;
	}

	.btn-xoa:hover {
		color: white;
		text-decoration: none;
	}

	.btn-xembaidanop {
		background-color: #4a71ff;
		color: white;
		border: none;
		padding: 10px;
		border-radius: 5px;
		cursor: pointer;
		transition: 0.3s;
		margin-right: 20px;
	}

	.btn-xembaidanop:hover {
		color: white;
		text-decoration: none;
	}

	.btn-nopbai {
		background-color: #28a745;
		color: white;
		border: none;
		padding: 10px 20px;
		border-radius: 5px;
		cursor: pointer;
		transition: 0.3s;
	}

	.btn-nopbai:hover {
		background-color: #218838;
	}

	.btn-xemtruoc {
		background-color: #007bff;
		color: white;
		border: none;
		padding: 10px 20px;
		border-radius: 5px;
		cursor: pointer;
		transition: 0.3s;
	}

	.btn-xemtruoc:hover {
		background-color: #0056b3;
	}

</style>
<div style="position: relative; width: 100%;">
	<img class="img-fluid" src="/images/@Model.ClassRoom.backgroundUrl" alt="No Images" style="width: 100%; height: 400px;" />
	@{
		if (Model.isOwner)
		{
			<form id="changeBG" action="/ClassRooms/changeBackground" method="POST" enctype="multipart/form-data" style="position: absolute; bottom: 10px; right: 10px;">
				<input type="hidden" name="classId" value="@Model.ClassRoom.Id" />
				<label for="file-upload" class="custom-file-upload">
					<i class="fa-solid fa-camera"></i>
					Thay đổi ảnh bìa
				</label>
				<input id="file-upload" type="file" name="image" accept="image/*" required
					   onchange="document.getElementById('changeBG').submit();" style="display:none;" />
			</form>
		}
	}
</div>
@* ================================= *@
<div class="ClassroomDetail-container">
	<div class="ClassroomDetail-left-container">
		<div class="panel panel-default" style="width: 100%; margin-top: 15px;">
			<div class="panel-heading">
				THÔNG TIN LỚP HỌC
			</div>
			<ul class="list-group">
				<li class="list-group-item">
					<h6 style="text-align: center; font-weight: bold; font-size: 12px;">Mã lớp</h6>
					<div class="list-group-item1-container">
						<div class="IDClass_list-group-item1">
							<input type="hidden" id="contentcopy" value="@Model.ClassRoom.Id" readonly style="border: none; background: transparent; font-size: 14px; width: 60px;" />
							<button style="border: none; background-color: transparent;font-size: 25px;" id="btnCopy">
								@Model.ClassRoom.Id
							</button>

						</div>
						@Html.Raw(qrCode)
					</div>
				</li>
				<li class="list-group-item padding-custom" style="font-weight: bold;">@Model.ClassRoom.Name</li>
				<li class="list-group-item padding-custom">@Model.ClassRoom.Description</li>
				<li class="list-group-item padding-custom color-custom">
					<a href="@Model.ClassRoom.RoomOnline&User=@user.Id&class=@Model.ClassRoom.Id" id="diemDanhBtn" class="custom-VaoPhong" id="join-btn">Tham gia phòng học</a>
				</li>
			</ul>
		</div>
		<div class="panel panel-default" style="width: 100%; margin-top: 15px;">
			<div class="panel-heading">
				ĐIỂM DANH
			</div>
			<ul class="list-group">
				@foreach (var item in Model.ClassDates)
				{
					DateTime now = DateTime.Now;
					if (item.Start <= now)
					{
						<li class="list-group-item padding-custom">
							Ngày @item.Start.ToString("dd/MM/yyyy")
							<span style="float: right;">
								<a asp-controller="DiemDanhs" asp-action="Index" asp-route-date="@item.Start.ToString("yyyy-MM-ddTHH:mm:ss")" asp-route-classroomId="@Model.ClassRoom.Id" style="text-decoration: none; color: #428bca">Xem chi tiết</a>
							</span>
						</li>
					}
				}
			</ul>
		</div>
	</div>
	<div class="ClassroomDetail-right-container">
		<div class="tabs" style="display: flex; justify-content: center;">
			<div class="tab" onclick="openTab(event, 'teacher')" style="font-family: Poppins, sans-serif;font-weight: 600">Thông tin giáo viên</div>
			<div class="tab" onclick="openTab(event, 'posts')" style="font-family: Poppins, sans-serif;font-weight: 600">Bài Giảng</div>
			<div class="tab" onclick="openTab(event, 'assignments')" style="font-family: Poppins, sans-serif;font-weight: 600">Bài tập</div>
			<div class="tab" onclick="openTab(event, 'discussion')" style="font-family: Poppins, sans-serif;font-weight: 600">Thảo luận</div>
			<div class="tab" onclick="openTab(event, 'listsv')" style="font-family: Poppins, sans-serif;font-weight: 600">Danh sách sinh viên</div>
			@{
				if (Model.CustomRubric == false)
				{
					<div class="tab" onclick="openTab(event, 'bangdiem')" style="font-family: Poppins, sans-serif;font-weight: 600">Bảng điểm</div>
				}
				else
				{
					<div class="tab" onclick="openTab(event, 'bangdiemCustom')" style="font-family: Poppins, sans-serif;font-weight: 600">Bảng điểm</div>
				}
			}
			@* <div class="tab" onclick="openTab(event, 'padlet')" style="font-family: Poppins, sans-serif;font-weight: 600">Padlet</div> *@
			<div class="tab" onclick="openTab(event, 'letter')" style="font-family: Poppins, sans-serif;font-weight: 600">Đơn từ</div>
			@{
				if (Model.isOwner)
				{
					<div class="tab" onclick="openTab(event, 'setting')" style="font-family: Poppins, sans-serif;font-weight: 600">Tuỳ chỉnh</div>
				}
			}
			<div class="tab" onclick="openTab(event, 'mainload')" style="font-family: Poppins, sans-serif;font-weight: 600" hidden>MainLoad</div>
		</div>
		<div id="teacher" class="tabcontent">
			<div class="teacher-info" style="background-color: #fdffe0">
				<h2 style="font-family: Poppins, sans-serif;">Thông tin giáo viên</h2>
				<div class="teacher-details">
					<img src="/Imgs_avtUser/@Model.Owner.UrlAvt" alt="Teacher image" class="teacher-image" />
					<div class="teacher-text">
						<p style="font-family: Poppins, sans-serif;"><strong>Mã giảng viên:</strong> @Model.Owner.Mssv</p>
						<p style="font-family: Poppins, sans-serif;"><strong>Tên giảng viên:</strong> @Model.Owner.Name</p>
						<p style="font-family: Poppins, sans-serif;"><strong>Email:</strong> @Model.Owner.Email</p>
					</div>
				</div>
			</div>
		</div>
		<div id="posts" class="tabcontent">
			@{
				if (Model.isOwner)
				{
					<div>
						<button id="browseBaiGiang" class="button_btnBaiGiang">
							<svg xmlns="http://www.w3.org/2000/svg">
								<rect class="border_btnBaiGiang" pathLength="100"></rect>
								<rect class="loading_btnBaiGiang" id="progressBar_btnBaiGiang" pathLength="100"></rect>

								<svg class="done-svg_btnBaiGiang"
									 xmlns="http://www.w3.org/2000/svg"
									 viewBox="0 0 24 24">
									<path class="done_btnBaiGiang done-cloud_btnBaiGiang"
										  pathLength="100"
										  d="M 6.5,20 Q 4.22,20 2.61,18.43 1,16.85 1,14.58 1,12.63 2.17,11.1 3.35,9.57 5.25,9.15 5.88,6.85 7.75,5.43 9.63,4 12,4 14.93,4 16.96,6.04 19,8.07 19,11 q 1.73,0.2 2.86,1.5 1.14,1.28 1.14,3 0,1.88 -1.31,3.19 Q 20.38,20 18.5,20 Z"></path>
									<path class="done_btnBaiGiang done-check_btnBaiGiang"
										  pathLength="100"
										  d="M 7.515,12.74 10.34143,15.563569 15.275,10.625"></path>
								</svg>
							</svg>
							<div class="txt-upload_btnBaiGiang">Upload</div>
						</button>
					</div>
				}
			}
			<div class="posts" id="lectureContainer">
				<partial name="_lecturePartial" model="Model.Unit" />
			</div>
		</div>
		<div id="assignments" class="tabcontent" style="width:100%">
			@{
				if (Model.isOwner)
				{
					<button id="uploadButton" onclick="Showtaobaitap()" class="btn-taobaitap">Tạo bài tập mới</button>
					<form class="khungtaobaitap" id="uploadbaitap" action="/ClassRooms/CreateBaitap" method="POST" style="display: none;" enctype="multipart/form-data">
						<div class="form-section">
							<label for="titleInput">Tiêu đề bài tập:</label>
							<input type="text" name="Title" id="titleInput" class="form-control" placeholder="Nhập tiêu đề">
							<label for="descriptionInput">Mô tả bài tập:</label>
							<textarea name="Content" id="descriptionInput" class="form-control" placeholder="Nhập mô tả" style="display: block;width: 660px;height: 130px; resize: none;"></textarea>
							<label for="deadlineInput">Hạn nộp:</label>
							<input type="datetime-local" name="Deadline" id="deadlineInput" class="form-control">
							<label for="fileFormatSelect">Chọn định dạng file cần nộp:</label>
							<select name="FileFormat" id="fileFormatSelect">
								<option value="pdf">pdf</option>
								<option value="docx">docx</option>
								<option value="xlsx">xls</option>
								<option value="zip">zip</option>
								<option value="rar">rar</option>
								<option value="png">png</option>
								<option value="mp4">mp4</option>
								<option value="allfile">all file</option>
							</select>
							<select name="bt_category">
								<option value="BTNhom">Bài tập nhóm</option>
								<option value="CaNhan">Bài cá nhân</option>
							</select>
							<div></div>
							<label for="showMode">Chế độ hiển thị:</label>
							<select name="showMode">
								<option value="All">Tất cả mọi người</option>
								<option value="Chan">Sinh viên có mã số chẵn (4 số cuối)</option>
								<option value="Le">Sinh viên có mã số lẻ (4 số cuối)</option>
							</select>
							<div></div>
							<label for="maxSize">Dung lượng tối đa:</label>
							<input type="number" name="MaxSize" id="maxSize" class="form-control" placeholder="Dung lượng tối đa cho phép nộp (MB)" />
						</div>
						<input type="hidden" name="ClassId" id="classIdInput" value="@Model.ClassRoom.Id">
						<label for="fileInput">Hướng dẫn (Nếu có): </label>
						<input type="hidden" name="AttactURL" id="attactURL">
						<label for="fileInput" class="custom-file-upload" style="height: 30px; margin-top: 10px; display: inline-flex; align-items: center;">
							Upload file HD
						</label>
						<input type="file" name="FileUpLoad" id="fileInput" onchange="uploadFile()" />

						<div class="modal" id="uploadModal" style="background-color: transparent;">
							<div class="modal-content">
								<div class="modal-header">
									<h5 class="modal-title">Uploading File...</h5>
								</div>
								<div class="modal-body text-center">
									<div class="loader" id="loader" style="display: block;"></div>
									<progress id="progressBar" value="0" max="100" style="display: none;"></progress>
									<div id="progressText" style="display: block;" class="mt-3">0%</div>
									<div id="successText" class="mt-3" style="display: none;">Upload thành công</div>
								</div>
							</div>
						</div>

						<div class="modal-backdrop" id="modalBackdrop"></div>
						<div id="TenFile" style="display: inline;"></div>
						<div></div>
						<input type="submit" value="Giao bài" class="giaobai-btn">
						<button type="button" class="close-btn">Đóng</button>
					</form>
				}
			}
			<div class="assignments">
				@{
					if (Model.Homework?.Count == 0)
					{
						<img src="~/images/emptyData.gif" style="width: 200px; height: auto; display: flex; justify-self: center;" />
						<h3 style="font-family: 'JetBrains Mono',serif; text-align: center;">Chưa có bài tập được đăng lên</h3>
					}
				
					string s = user.Mssv;
					int total = 0;
					// Lấy 4 ký tự cuối
					string lastFour = s.Substring(s.Length - 4);

					// Chuyển đổi thành số
					int number = int.Parse(lastFour);

					// Cộng vào tổng
					total += number;

					foreach (var assignment in Model.Homework.ToList())
					{
						if (Model.isOwner){
							<div class="assignment">
								<div class="assignment-left-box">
									<h3>@assignment.Title</h3>
									<p>@assignment.Content</p>
									@{
										if (assignment.Loaibt.Equals("CaNhan"))
										{
											<p><strong>Loại bài tập:</strong> Bài tập cá nhân</p>
										}
										else
										{
											<p><strong>Loại bài tập:</strong> Bài tập nhóm</p>
										}
									}
								</div>
								<div class="divider"></div>
								<div class="assignment-middle-box">
									@{
										if (assignment.Deadline.HasValue)
										{
											<p>Hạn nộp: @assignment.Deadline</p>
										}
										else
										{
											<p>Hạn nộp: Vô thời hạn</p>
										}
									}

									<p class="assignment-file-format">Yêu cầu nộp file: @assignment.FileFormat</p>
									<p class="assignment-description">Dung lượng file tối đa: @assignment.MaxSize MB</p>
									@if (!string.IsNullOrEmpty(assignment.attractUrl))
									{
										<a href="/Uploads/BAITAP/@assignment.attractUrl" target="_blank" style="text-decoration:none; color: deepskyblue!important;">@assignment.attractUrl</a>
									}
								</div>
								<div class="divider"></div>
								<div class="assignment-right-box">
									@{
										// L?y userId
										string userId = user != null ? user.Id : null;

										// L?y baiTapId t? assignment ho?c t? noi khác
										string baiTapId = assignment != null ? assignment.Id : null;

										// Ki?m tra xem user dã n?p bài t?p hay chua
										bool hasSubmitted = userId != null && baiTapId != null ? CheckNop.HasUserSubmittedBaiTap(userId, baiTapId) : false;
									}

									<form id="submitForm_@assignment.Id" action="/ClassRooms/Nopbai" method="post" enctype="multipart/form-data" class="assignment-form" onsubmit="return validateAndSubmit('@assignment.FileFormat', '@assignment.Id', event)">
										@{
											if (!Model.isOwner)
											{
												<label for="file-upload" class="file-label1" style="white-space: nowrap;">Bài tập của bạn</label>
												<div class="file-input-wrapper">
													@{
														if (hasSubmitted)
														{
															<p style="text-align: center; margin-left: 15px;">Đã nộp bài</p>
														}
														else
														{
															// Ki?m tra deadline
															if (assignment != null && assignment.Deadline.HasValue)
															{
																// L?y ngày deadline
																DateTime deadline = assignment.Deadline.Value;

																// Ki?m tra xem deadline dã qua hay chua
																if (DateTime.Now > deadline)
																{
																	// X? lý khi deadline dã qua
																	// Ví d?: hi?n th? thông báo cho ngu?i dùng
																	<p style="text-align: center;">Deadline dã qua. Không thể nộp bài tập nữa.</p>
																}
																else
																{
																	// X? lý khi deadline chua qua
																	// Ví d?: cho phép ngu?i dùng n?p bài t?p
																	<p>Thiếu</p>
																	<input id="FileInput_@assignment.Id" type="file" name="FileNopbai" accept="@(assignment.FileFormat == "allfile" ? "/" : assignment.FileFormat)" onchange="checkFileSize(this, @assignment.MaxSize)">

																	<input type="hidden" name="ClassId" id="classIdInput" value="@Model.ClassRoom.Id">
																	<input type="hidden" name="BaitapId" id="baitapinput" value="@assignment.Id">
																	<input type="hidden" id="uploadedFilePath" name="UploadedFilePath">
																	<p id="uploadStatus_@assignment.Id"></p>
																	<button type="submit" id="uploadButton_@assignment.Id" class="btn-nopbai">Nộp bài</button>
																	<button type="button" onclick="previewFile('@assignment.Id')" class="btn-xemtruoc">Xem trước</button>
																}
															}
															else
															{
																<p>Thiếu</p>
																<input id="FileInput_@assignment.Id" type="file" name="FileNopbai" accept="@(assignment.FileFormat == "allfile" ? "/" : assignment.FileFormat)" onchange="checkFileSize(this, @assignment.MaxSize)">

																<input type="hidden" name="ClassId" id="classIdInput" value="@Model.ClassRoom.Id">
																<input type="hidden" name="BaitapId" id="baitapinput" value="@assignment.Id">
																<input type="hidden" id="uploadedFilePath" name="UploadedFilePath">
																<p id="uploadStatus_@assignment.Id"></p>
																<button type="submit" id="uploadButton_@assignment.Id" class="btn-nopbai">Nộp bài</button>
																<button type="button" onclick="previewFile('@assignment.Id')" class="btn-xemtruoc">Xem trước</button>
															}
														}
													}
												</div>
												<div id="previewContainer_@assignment.Id"></div>
											}
											else
											{
												<a asp-action="GetAllBTStu" asp-controller="ClassRooms" asp-route-classid="@Model.ClassRoom.Id" asp-route-baitapID="@assignment.Id" class="btn-xembaidanop ">Xem bài tập đã nộp</a>
												<a class="btn-xoa" asp-action="DeleteBT" asp-controller="ClassRooms" asp-route-id="@assignment.Id" asp-route-classId="@assignment.ClassRoomId" onclick="return confirm('Bạn có chắc muốn xoá không ?')">Xóa</a>
											}
										}
									</form>
								</div>
							</div>
						} 
						else {
							if (assignment.ShowMode.Equals("All"))
							{
								<div class="assignment">
								<div class="assignment-left-box">
									<h3>@assignment.Title</h3>
									<p>@assignment.Content</p>
									@{
										if (assignment.Loaibt.Equals("CaNhan"))
										{
											<p><strong>Loại bài tập:</strong> Bài tập cá nhân</p>
										}
										else
										{
											<p><strong>Loại bài tập:</strong> Bài tập nhóm</p>
										}
									}
								</div>
								<div class="divider"></div>
								<div class="assignment-middle-box">
									@{
										if (assignment.Deadline.HasValue)
										{
											<p>Hạn nộp: @assignment.Deadline</p>
										}
										else
										{
											<p>Hạn nộp: Vô thời hạn</p>
										}
									}

									<p class="assignment-file-format">Yêu cầu nộp file: @assignment.FileFormat</p>
									<p class="assignment-description">Dung lượng file tối đa: @assignment.MaxSize MB</p>
									@if (!string.IsNullOrEmpty(assignment.attractUrl))
									{
										<a href="/Uploads/BAITAP/@assignment.attractUrl" target="_blank" style="text-decoration:none; color: deepskyblue!important;">@assignment.attractUrl</a>
									}
								</div>
								<div class="divider"></div>
								<div class="assignment-right-box">
									@{
										// L?y userId
										string userId = user != null ? user.Id : null;

										// L?y baiTapId t? assignment ho?c t? noi khác
										string baiTapId = assignment != null ? assignment.Id : null;

										// Ki?m tra xem user dã n?p bài t?p hay chua
										bool hasSubmitted = userId != null && baiTapId != null ? CheckNop.HasUserSubmittedBaiTap(userId, baiTapId) : false;
									}

									<form id="submitForm_@assignment.Id" action="/ClassRooms/Nopbai" method="post" enctype="multipart/form-data" class="assignment-form" onsubmit="return validateAndSubmit('@assignment.FileFormat', '@assignment.Id', event)">
										@{
											if (!Model.isOwner)
											{
												<label for="file-upload" class="file-label1" style="white-space: nowrap;">Bài tập của bạn</label>
												<div class="file-input-wrapper">
													@{
														if (hasSubmitted)
														{
															<p style="text-align: center; margin-left: 15px;">Đã nộp bài</p>
														}
														else
														{
															// Ki?m tra deadline
															if (assignment != null && assignment.Deadline.HasValue)
															{
																// L?y ngày deadline
																DateTime deadline = assignment.Deadline.Value;

																// Ki?m tra xem deadline dã qua hay chua
																if (DateTime.Now > deadline)
																{
																	// X? lý khi deadline dã qua
																	// Ví d?: hi?n th? thông báo cho ngu?i dùng
																	<p style="text-align: center;">Deadline dã qua. Không thể nộp bài tập nữa.</p>
																}
																else
																{
																	// X? lý khi deadline chua qua
																	// Ví d?: cho phép ngu?i dùng n?p bài t?p
																	<p>Thiếu</p>
																	<input id="FileInput_@assignment.Id" type="file" name="FileNopbai" accept="@(assignment.FileFormat == "allfile" ? "/" : assignment.FileFormat)" onchange="checkFileSize(this, @assignment.MaxSize)">

																	<input type="hidden" name="ClassId" id="classIdInput" value="@Model.ClassRoom.Id">
																	<input type="hidden" name="BaitapId" id="baitapinput" value="@assignment.Id">
																	<input type="hidden" id="uploadedFilePath" name="UploadedFilePath">
																	<p id="uploadStatus_@assignment.Id"></p>
																	<button type="submit" id="uploadButton_@assignment.Id" class="btn-nopbai">Nộp bài</button>
																	<button type="button" onclick="previewFile('@assignment.Id')" class="btn-xemtruoc">Xem trước</button>
																}
															}
															else
															{
																<p>Thiếu</p>
																<input id="FileInput_@assignment.Id" type="file" name="FileNopbai" accept="@(assignment.FileFormat == "allfile" ? "/" : assignment.FileFormat)" onchange="checkFileSize(this, @assignment.MaxSize)">

																<input type="hidden" name="ClassId" id="classIdInput" value="@Model.ClassRoom.Id">
																<input type="hidden" name="BaitapId" id="baitapinput" value="@assignment.Id">
																<input type="hidden" id="uploadedFilePath" name="UploadedFilePath">
																<p id="uploadStatus_@assignment.Id"></p>
																<button type="submit" id="uploadButton_@assignment.Id" class="btn-nopbai">Nộp bài</button>
																<button type="button" onclick="previewFile('@assignment.Id')" class="btn-xemtruoc">Xem trước</button>
															}
														}
													}
												</div>
												<div id="previewContainer_@assignment.Id"></div>
											}
											else
											{
												<a asp-action="GetAllBTStu" asp-controller="ClassRooms" asp-route-classid="@Model.ClassRoom.Id" asp-route-baitapID="@assignment.Id" class="btn-xembaidanop ">Xem bài tập đã nộp</a>
												<a class="btn-xoa" asp-action="DeleteBT" asp-controller="ClassRooms" asp-route-id="@assignment.Id" asp-route-classId="@assignment.ClassRoomId" onclick="return confirm('Bạn có chắc muốn xoá không ?')">Xóa</a>
											}
										}
									</form>
								</div>
								</div>
							}
							if (total % 2 == 0 )
							{
								if (assignment.ShowMode.Equals("Chan"))
								{
									<div class="assignment">
										<div class="assignment-left-box">
											<h3>@assignment.Title</h3>
											<p>@assignment.Content</p>
											@{
												if (assignment.Loaibt.Equals("CaNhan"))
												{
													<p><strong>Loại bài tập:</strong> Bài tập cá nhân</p>
												}
												else
												{
													<p><strong>Loại bài tập:</strong> Bài tập nhóm</p>
												}
											}
										</div>
										<div class="divider"></div>
										<div class="assignment-middle-box">
											@{
												if (assignment.Deadline.HasValue)
												{
													<p>Hạn nộp: @assignment.Deadline</p>
												}
												else
												{
													<p>Hạn nộp: Vô thời hạn</p>
												}
											}

											<p class="assignment-file-format">Yêu cầu nộp file: @assignment.FileFormat</p>
											<p class="assignment-description">Dung lượng file tối đa: @assignment.MaxSize MB</p>
											@if (!string.IsNullOrEmpty(assignment.attractUrl))
											{
												<a href="/Uploads/BAITAP/@assignment.attractUrl" target="_blank" style="text-decoration:none; color: deepskyblue!important;">@assignment.attractUrl</a>
											}
										</div>
										<div class="divider"></div>
										<div class="assignment-right-box">
											@{
												// L?y userId
												string userId = user != null ? user.Id : null;

												// L?y baiTapId t? assignment ho?c t? noi khác
												string baiTapId = assignment != null ? assignment.Id : null;

												// Ki?m tra xem user dã n?p bài t?p hay chua
												bool hasSubmitted = userId != null && baiTapId != null ? CheckNop.HasUserSubmittedBaiTap(userId, baiTapId) : false;
											}

											<form id="submitForm_@assignment.Id" action="/ClassRooms/Nopbai" method="post" enctype="multipart/form-data" class="assignment-form" onsubmit="return validateAndSubmit('@assignment.FileFormat', '@assignment.Id', event)">
												@{
													if (!Model.isOwner)
													{
														<label for="file-upload" class="file-label1" style="white-space: nowrap;">Bài tập của bạn</label>
														<div class="file-input-wrapper">
															@{
																if (hasSubmitted)
																{
																	<p style="text-align: center; margin-left: 15px;">Đã nộp bài</p>
																}
																else
																{
																	// Ki?m tra deadline
																	if (assignment != null && assignment.Deadline.HasValue)
																	{
																		// L?y ngày deadline
																		DateTime deadline = assignment.Deadline.Value;

																		// Ki?m tra xem deadline dã qua hay chua
																		if (DateTime.Now > deadline)
																		{
																			// X? lý khi deadline dã qua
																			// Ví d?: hi?n th? thông báo cho ngu?i dùng
																			<p style="text-align: center;">Deadline dã qua. Không thể nộp bài tập nữa.</p>
																		}
																		else
																		{
																			// X? lý khi deadline chua qua
																			// Ví d?: cho phép ngu?i dùng n?p bài t?p
																			<p>Thiếu</p>
																			<input id="FileInput_@assignment.Id" type="file" name="FileNopbai" accept="@(assignment.FileFormat == "allfile" ? "/" : assignment.FileFormat)" onchange="checkFileSize(this, @assignment.MaxSize)">

																			<input type="hidden" name="ClassId" id="classIdInput" value="@Model.ClassRoom.Id">
																			<input type="hidden" name="BaitapId" id="baitapinput" value="@assignment.Id">
																			<input type="hidden" id="uploadedFilePath" name="UploadedFilePath">
																			<p id="uploadStatus_@assignment.Id"></p>
																			<button type="submit" id="uploadButton_@assignment.Id" class="btn-nopbai">Nộp bài</button>
																			<button type="button" onclick="previewFile('@assignment.Id')" class="btn-xemtruoc">Xem trước</button>
																		}
																	}
																	else
																	{
																		<p>Thiếu</p>
																		<input id="FileInput_@assignment.Id" type="file" name="FileNopbai" accept="@(assignment.FileFormat == "allfile" ? "/" : assignment.FileFormat)" onchange="checkFileSize(this, @assignment.MaxSize)">

																		<input type="hidden" name="ClassId" id="classIdInput" value="@Model.ClassRoom.Id">
																		<input type="hidden" name="BaitapId" id="baitapinput" value="@assignment.Id">
																		<input type="hidden" id="uploadedFilePath" name="UploadedFilePath">
																		<p id="uploadStatus_@assignment.Id"></p>
																		<button type="submit" id="uploadButton_@assignment.Id" class="btn-nopbai">Nộp bài</button>
																		<button type="button" onclick="previewFile('@assignment.Id')" class="btn-xemtruoc">Xem trước</button>
																	}
																}
															}
														</div>
														<div id="previewContainer_@assignment.Id"></div>
													}
													else
													{
														<a asp-action="GetAllBTStu" asp-controller="ClassRooms" asp-route-classid="@Model.ClassRoom.Id" asp-route-baitapID="@assignment.Id" class="btn-xembaidanop ">Xem bài tập đã nộp</a>
														<a class="btn-xoa" asp-action="DeleteBT" asp-controller="ClassRooms" asp-route-id="@assignment.Id" asp-route-classId="@assignment.ClassRoomId" onclick="return confirm('Bạn có chắc muốn xoá không ?')">Xóa</a>
													}
												}
											</form>
										</div>
									</div>
								}
								
							}
							else if (assignment.ShowMode.Equals("Le"))
						{
							<div class="assignment">
								<div class="assignment-left-box">
									<h3>@assignment.Title</h3>
									<p>@assignment.Content</p>
									@{
										if (assignment.Loaibt.Equals("CaNhan"))
										{
											<p><strong>Loại bài tập:</strong> Bài tập cá nhân</p>
										}
										else
										{
											<p><strong>Loại bài tập:</strong> Bài tập nhóm</p>
										}
									}
								</div>
								<div class="divider"></div>
								<div class="assignment-middle-box">
									@{
										if (assignment.Deadline.HasValue)
										{
											<p>Hạn nộp: @assignment.Deadline</p>
										}
										else
										{
											<p>Hạn nộp: Vô thời hạn</p>
										}
									}

									<p class="assignment-file-format">Yêu cầu nộp file: @assignment.FileFormat</p>
									<p class="assignment-description">Dung lượng file tối đa: @assignment.MaxSize MB</p>
									@if (!string.IsNullOrEmpty(assignment.attractUrl))
									{
										<a href="/Uploads/BAITAP/@assignment.attractUrl" target="_blank" style="text-decoration:none; color: deepskyblue!important;">@assignment.attractUrl</a>
									}
								</div>
								<div class="divider"></div>
								<div class="assignment-right-box">
									@{
										// L?y userId
										string userId = user != null ? user.Id : null;

										// L?y baiTapId t? assignment ho?c t? noi khác
										string baiTapId = assignment != null ? assignment.Id : null;

										// Ki?m tra xem user dã n?p bài t?p hay chua
										bool hasSubmitted = userId != null && baiTapId != null ? CheckNop.HasUserSubmittedBaiTap(userId, baiTapId) : false;
									}

									<form id="submitForm_@assignment.Id" action="/ClassRooms/Nopbai" method="post" enctype="multipart/form-data" class="assignment-form" onsubmit="return validateAndSubmit('@assignment.FileFormat', '@assignment.Id', event)">
										@{
											if (!Model.isOwner)
											{
												<label for="file-upload" class="file-label1" style="white-space: nowrap;">Bài tập của bạn</label>
												<div class="file-input-wrapper">
													@{
														if (hasSubmitted)
														{
															<p style="text-align: center; margin-left: 15px;">Đã nộp bài</p>
														}
														else
														{
															// Ki?m tra deadline
															if (assignment != null && assignment.Deadline.HasValue)
															{
																// L?y ngày deadline
																DateTime deadline = assignment.Deadline.Value;

																// Ki?m tra xem deadline dã qua hay chua
																if (DateTime.Now > deadline)
																{
																	// X? lý khi deadline dã qua
																	// Ví d?: hi?n th? thông báo cho ngu?i dùng
																	<p style="text-align: center;">Deadline dã qua. Không thể nộp bài tập nữa.</p>
																}
																else
																{
																	// X? lý khi deadline chua qua
																	// Ví d?: cho phép ngu?i dùng n?p bài t?p
																	<p>Thiếu</p>
																	<input id="FileInput_@assignment.Id" type="file" name="FileNopbai" accept="@(assignment.FileFormat == "allfile" ? "/" : assignment.FileFormat)" onchange="checkFileSize(this, @assignment.MaxSize)">

																	<input type="hidden" name="ClassId" id="classIdInput" value="@Model.ClassRoom.Id">
																	<input type="hidden" name="BaitapId" id="baitapinput" value="@assignment.Id">
																	<input type="hidden" id="uploadedFilePath" name="UploadedFilePath">
																	<p id="uploadStatus_@assignment.Id"></p>
																	<button type="submit" id="uploadButton_@assignment.Id" class="btn-nopbai">Nộp bài</button>
																	<button type="button" onclick="previewFile('@assignment.Id')" class="btn-xemtruoc">Xem trước</button>
																}
															}
															else
															{
																<p>Thiếu</p>
																<input id="FileInput_@assignment.Id" type="file" name="FileNopbai" accept="@(assignment.FileFormat == "allfile" ? "/" : assignment.FileFormat)" onchange="checkFileSize(this, @assignment.MaxSize)">

																<input type="hidden" name="ClassId" id="classIdInput" value="@Model.ClassRoom.Id">
																<input type="hidden" name="BaitapId" id="baitapinput" value="@assignment.Id">
																<input type="hidden" id="uploadedFilePath" name="UploadedFilePath">
																<p id="uploadStatus_@assignment.Id"></p>
																<button type="submit" id="uploadButton_@assignment.Id" class="btn-nopbai">Nộp bài</button>
																<button type="button" onclick="previewFile('@assignment.Id')" class="btn-xemtruoc">Xem trước</button>
															}
														}
													}
												</div>
												<div id="previewContainer_@assignment.Id"></div>
											}
											else
											{
												<a asp-action="GetAllBTStu" asp-controller="ClassRooms" asp-route-classid="@Model.ClassRoom.Id" asp-route-baitapID="@assignment.Id" class="btn-xembaidanop ">Xem bài tập đã nộp</a>
												<a class="btn-xoa" asp-action="DeleteBT" asp-controller="ClassRooms" asp-route-id="@assignment.Id" asp-route-classId="@assignment.ClassRoomId" onclick="return confirm('Bạn có chắc muốn xoá không ?')">Xóa</a>
											}
										}
									</form>
								</div>
							</div>
						}
						}
					}
				}
			</div>
		</div>
		<div id="discussion" class="tabcontent">
			<div class="discussion">
				<div class="discussion-container">
					<div class="right-panel">
						<div id="messagesList" class="message-list">
							<partial name="_MessagePartial" model="Model.Message" />
						</div>
						<form id="uploadForm" enctype="multipart/form-data" class="message-form">
							<div class="input-hidden">
								<input type="text" id="userInput" class="form-control" />
								<input type="text" id="classId" class="form-control" value="@Model.ClassRoom.Id" />
							</div>
							<div class="message-input-group">
								<button type="button" onclick="startSpeechRecognition()" id="recordButton" class="record" title="Bắt đầu ghi âm">
									<svg class="microphone-icon" height="25px" viewBox="0 0 24 24" width="25px">
										<title>Nhấn để ghi âm</title>
										<path d="M5 4a4 4 0 018 0v5.5a4 4 0 01-8 0V4z" fill="#ff397f"></path>
										<path d="M3.5 20.5a1 1 0 011-1h2.75a.5.5 0 00.5-.5v-.66a.52.52 0 00-.43-.5A8.5 8.5 0 01.5 9.5V9a1 1 0 011-1H2a1 1 0 011 1v.5a6 6 0 0012 0V9a1 1 0 011-1h.5a1 1 0 011 1v.5a8.5 8.5 0 01-6.82 8.33.52.52 0 00-.43.51V19c0 .28.22.5.5.5h2.75a1 1 0 011 1v.5a1 1 0 01-1 1h-9a1 1 0 01-1-1v-.5z" fill="#ff397f"></path>
									</svg>
								</button>
								<label class="file-label" for="FileInput" title="Chọn tệp">
									<span class="image-icon_discuss">
										<svg xmlns="http://www.w3.org/2000/svg" width="25px" height="25px" fill="#ff397f" class="bi bi-paperclip" viewBox="0 0 16 16">
											<path d="M4.5 3a2.5 2.5 0 0 1 5 0v9a1.5 1.5 0 0 1-3 0V5a.5.5 0 0 1 1 0v7a.5.5 0 0 0 1 0V3a1.5 1.5 0 1 0-3 0v9a2.5 2.5 0 0 0 5 0V5a.5.5 0 0 1 1 0v7a3.5 3.5 0 1 1-7 0z" />
										</svg>
									</span>
								</label>
								<input type="file" id="FileInput" style="display: none;">
								@*<span id="fileName" class="file-name">Không có tệp nào được chọn</span> *@
								<input type="text" class="form-control" id="messageInput" placeholder="Nhập tin nhắn" />
								<button type="button" id="sendButton" class="send-button_discuss" aria-label="Nhấn Enter để gửi">
									<svg class="send-icon_discuss" height="25px" viewBox="0 0 24 24" width="25px">
										<title>Nhấn Enter để gửi</title>
										<path d="M16.6915026,12.4744748 L3.50612381,13.2599618 C3.19218622,13.2599618 3.03521743,13.4170592 3.03521743,13.5741566 L1.15159189,20.0151496 C0.8376543,20.8006365 0.99,21.89 1.77946707,22.52 C2.41,22.99 3.50612381,23.1 4.13399899,22.8429026 L21.714504,14.0454487 C22.6563168,13.5741566 23.1272231,12.6315722 22.9702544,11.6889879 C22.8132856,11.0605983 22.3423792,10.4322088 21.714504,10.118014 L4.13399899,1.16346272 C3.34915502,0.9 2.40734225,1.00636533 1.77946707,1.4776575 C0.994623095,2.10604706 0.8376543,3.0486314 1.15159189,3.99121575 L3.03521743,10.4322088 C3.03521743,10.5893061 3.34915502,10.7464035 3.50612381,10.7464035 L16.6915026,11.5318905 C16.6915026,11.5318905 17.1624089,11.5318905 17.1624089,12.0031827 C17.1624089,12.4744748 16.6915026,12.4744748 16.6915026,12.4744748 Z" fill="var(--chat-composer-button-color)"></path>
									</svg>
								</button>
							</div>
						</form>
					</div>
				</div>
			</div>


		</div>
		<div id="listsv" class="tabcontent">
			@{
				if (Model.isOwner)
				{
					<div style="margin-bottom: -35px;">
						<form asp-controller="ClassRooms" asp-action="ExportDSSV" asp-route-classID="@Model.ClassRoom.Id" method="post">
							<button type="submit" class="btn btn-info">Xuất danh sách sinh viên</button>
						</form>
					</div>
				}
			}
			<div class="searchsv-container">
				<input type="text" id="searchsvInput" placeholder="🔍 Tìm kiếm sinh viên..." onkeyup="filterStudents()">
			</div>
			<div id="listsv1">
				<div class="container_listsv">
					<p class="header_listsv">Sĩ số: 0 sinh viên</p>
					<hr class="hr_listsv">

					<div class="row_listsv">
						<div class="card_listsv">
							<img class="img_listsv" src="/Imgs_avtUser/avatar.jpg" alt="No Image">
							<p class="p_listsv">MSSV</p>
							<p class="p_listsv">Name</p>
							<button class="invite_button" onclick="sendInvite('sample_id')">Gửi lời mời tạo nhóm</button>
						</div>
					</div>
				</div>
			</div>
		</div>
		<!-- Div bao quanh bảng điểm -->
		@{
			if (Model.isOwner)
			{
				if (Model.CustomRubric == false)
				{
					<div id="bangdiem" class="tabcontent">
						@{
							List<BaiTap> bt = ViewBag.ListBT as List<BaiTap>;
							List<DiemViewModel> diems = ViewBag.ListDiem as List<DiemViewModel>;
						}
						<div class="container-bangdiem">
							<table id="user">
								<thead>
									<tr class="first-column">
										<th style="text-align: center;" rowspan="2">Họ và tên</th>
										<th style="text-align: center;" rowspan="2">MSSV</th>
										<th style="text-align: center;" colspan="@bt.Count">Bài Tập</th>
										<th style="text-align: center;" rowspan="2">ÐTB</th>
									</tr>
									<tr>
										@foreach (var item in bt)
										{
											<th style="text-align: center;">@item.Title</th>
										}
									</tr>
								</thead>
								<tbody>
									@foreach (var item in diems)
									{
										<tr>
											<td>@item.HoVaTen</td>
											<td>@item.MSSV</td>

											@if (bt.Count <= 0)
											{
												<td> </td>
											}
											else
											{
												@foreach (var d in @item.listDiemBT)
												{
													<td style="text-align: center;">@d</td>
												}
											}
											<td>@item.DTB</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					</div>
				}
				else
				{
					<div id="bangdiemCustom" class="tabcontent">
						<iframe style="border: none;" src="@Url.Action("Details", "Rubrics", new { id = Model.Rubric.Id, classRoomId = Model.ClassRoom.Id, isowner = Model.isOwner})" width="100%" height="600px"></iframe>
					</div>
				}
			}
			else
			{
				if (Model.ClassRoom.ShowRubric == 1)
				{

					if (Model.CustomRubric == false)
					{
						<div id="bangdiem" class="tabcontent">
							@{
								List<BaiTap> bt = ViewBag.ListBT as List<BaiTap>;
								List<DiemViewModel> diems = ViewBag.ListDiem as List<DiemViewModel>;
							}
							<div class="container-bangdiem">
								<table id="user">
									<thead>
										<tr class="first-column">
											<th style="text-align: center;" rowspan="2">Họ và tên</th>
											<th style="text-align: center;" rowspan="2">MSSV</th>
											<th style="text-align: center;" colspan="@bt.Count">Bài Tập</th>
											<th style="text-align: center;" rowspan="2">ÐTB</th>
										</tr>
										<tr>
											@foreach (var item in bt)
											{
												<th style="text-align: center;">@item.Title</th>
											}
										</tr>
									</thead>
									<tbody>
										@foreach (var item in diems)
										{
											<tr>
												<td>@item.HoVaTen</td>
												<td>@item.MSSV</td>

												@if (bt.Count <= 0)
												{
													<td> </td>
												}
												else
												{
													@foreach (var d in @item.listDiemBT)
													{
														<td style="text-align: center;">@d</td>
													}
												}
												<td>@item.DTB</td>
											</tr>
										}
									</tbody>
								</table>
							</div>
						</div>
					}
					else
					{
						<div id="bangdiemCustom" class="tabcontent">
							<iframe style="border: none;" src="@Url.Action("Details", "Rubrics", new { id = Model.Rubric.Id, classRoomId = Model.ClassRoom.Id, isowner = Model.isOwner})" width="100%" height="600px"></iframe>
						</div>
					}
				}
				else
				{

					if (Model.CustomRubric == false)
					{
						<div id="bangdiem" class="tabcontent">
							<div class="text-center" style="margin-top: 150px"><p class="text-center">Bạn không có quyền xem bảng điểm !!!</p></div>
						</div>
					}
					else
					{
						<div id="bangdiemCustom" class="tabcontent">
							<div class="text-center" style="margin-top: 150px"><p class="text-center">Bạn không có quyền xem bảng điểm !!!</p></div>
						</div>
					}

				}
			}
		}

		@*<div id="padlet" class="tabcontent">
		<div class="padlet-embed" style="border:1px solid rgba(0,0,0,0.1);border-radius:2px;box-sizing:border-box;overflow:hidden;position:relative;width:100%;background:#F4F4F4"><p style="padding:0;margin:0"><iframe src="https://padlet.com/embed/lup9um2r33899yju" frameborder="0" allow="camera;microphone;geolocation" style="width:100%;height:608px;display:block;padding:0;margin:0"></iframe></p><div style="display:flex;align-items:center;justify-content:end;margin:0;height:28px"><a href="https://padlet.com?ref=embed" style="display:block;flex-grow:0;margin:0;border:none;padding:0;text-decoration:none" target="_blank"><div style="display:flex;align-items:center;"><img src="https://padlet.net/embeds/made_with_padlet_2022.png" width="114" height="28" style="padding:0;margin:0;background:0 0;border:none;box-shadow:none" alt="Made with Padlet"></div></a></div></div>
		</div>*@

		<div id="letter" class="tabcontent">
			<button type="button" class="btn btn-nghiphep" onclick="toggleLeaveRequestForm()">Tạo đơn xin nghỉ phép</button>
			<div id="leaveRequestFormContainer" style="display:none; margin-top: 20px;">
				<form id="leaveRequestForm" class="khungtaodontu">
					<input type="hidden" name="Id" value="0" />

					<div class="form-group" hidden>
						<label for="ClassId">Class ID:</label>
						<input type="text" class="form-control" id="ClassId" name="ClassId" value="@Model.ClassRoom.Id" readonly hidden />
					</div>

					<div class="form-group">
						<label for="StudenName">Họ và tên:</label>
						<input type="text" class="form-control" id="StudenName" name="Name" value="@user.Name" readonly />
						<input type="hidden" class="form-control" id="UserID" name="UserID" value="@user.Id" hidden />
					</div>

					<div class="form-group">
						<label for="StartDate">Ngày bắt đầu:</label>
						<input type="date" class="form-control" id="StartDate" name="StartDate" />
					</div>

					<div class="form-group">
						<label for="EndDate">Ngày kết thúc:</label>
						<input type="date" class="form-control" id="EndDate" name="EndDate" />
					</div>

					<div class="form-group">
						<label for="Reason">Lý do:</label>
						<textarea class="form-control" id="Reason" name="Reason" rows="4" style="resize: none;"></textarea>
					</div>

					<button type="submit" class="btn-guiyeucau" onclick="submitLeaveRequest(event)">Gửi yêu cầu</button>
				</form>
			</div>

			<div class="ctnleaveForm">
				<div id="leaveRequestsList" class="row">
					<!-- Cards will be dynamically added here -->
				</div>
			</div>

		</div>
		<div id="setting" class="tabcontent">
			<form asp-action="Edit" asp-controller="ClassRooms" method="post" id="editClassRoomForm">
				<input type="hidden" asp-for="@Model.ClassRoom.Id" name="Id" />

				<div class="form-group">
					<label asp-for="@Model.ClassRoom.Name">Tên lớp học</label>
					<input class="form-control" asp-for="@Model.ClassRoom.Name" name="Name" />
					<span asp-validation-for="@Model.ClassRoom.Name" class="text-danger"></span>
				</div>

				<div class="form-group">
					<label asp-for="@Model.ClassRoom.Description">Mô tả</label>
					<textarea style="resize: none;" class="form-control" asp-for="@Model.ClassRoom.Description" name="Description"></textarea>
					<span asp-validation-for="@Model.ClassRoom.Description" class="text-danger"></span>
				</div>

				<div class="form-group">
					<label asp-for="@Model.ClassRoom.StartDate">Ngày bắt đầu khoá học</label>
					<input class="form-control" asp-for="@Model.ClassRoom.StartDate" name="StartDate" type="date" />
					<span asp-validation-for="@Model.ClassRoom.StartDate" class="text-danger"></span>
				</div>

				<div class="form-group">
					<label asp-for="@Model.ClassRoom.EndDate">Ngày kết thúc khoá học</label>
					<input class="form-control" asp-for="@Model.ClassRoom.EndDate" name="EndDate" type="date" />
					<span asp-validation-for="@Model.ClassRoom.EndDate" class="text-danger"></span>
				</div>

				<div class="form-group">
					<label>Ngày học</label><br />
					@foreach (var day in Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>())
					{
						<div class="form-check form-check-inline">
							<input class="form-check-input" type="checkbox"
									name="DaysOfWeek"
									value="@day"
								@(Model.ClassRoom.DaysOfWeek.Contains(day.ToString()) ? "checked" : "") />
							<label class="form-check-label">@day</label>
						</div>
					}
					<span asp-validation-for="@Model.ClassRoom.DaysOfWeek" class="text-danger"></span>
				</div>

				<div class="form-group">
					<label asp-for="@Model.ClassRoom.StartTime">Giờ bắt đầu</label>
					<input class="form-control" asp-for="@Model.ClassRoom.StartTime" name="StartTime" type="time" />
					<span asp-validation-for="@Model.ClassRoom.StartTime" class="text-danger"></span>
				</div>

				<div class="form-group">
					<label asp-for="@Model.ClassRoom.EndTime">Giờ kết thúc</label>
					<input class="form-control" asp-for="@Model.ClassRoom.EndTime" name="EndTime" type="time" />
					<span asp-validation-for="@Model.ClassRoom.EndTime" class="text-danger"></span>
				</div>
				<div class="form-group">
					<label for="publicRubric">Chế độ hiển thị bảng điểm</label><br />

					<input type="radio" id="showPublic" name="ShowRubric" value="0"
					@if (Model.ClassRoom.ShowRubric == 0)
					{
						<text>checked</text>
					} />
					<label for="showPublic">Riêng tư</label><br />

					<input type="radio" id="showPrivate" name="ShowRubric" value="1"
					@if (Model.ClassRoom.ShowRubric == 1)
					{
						<text>checked</text>
					} />
					<label for="showPrivate">Công khai</label><br />
				</div>
				<button type="submit" class="btn btn-primary" id="saveButton_setting">Lưu thông tin</button>
			</form>
			<form asp-action="Delete" method="post" id="deleteForm">
				<input type="hidden" name="Id" value="@Model.ClassRoom.Id" />
				<button type="submit" class="btn btn-sm btn-danger btn-action" style="font-size: 14px;" data-bs-toggle="modal" data-bs-target="#deleteModal">Xóa</button>
			</form>
			<!-- Modal join-->
			<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="DeleteModelLabel" aria-hidden="true">
				<div class="modal-dialog" role="document">
					<div class="modal-content">
						<div class="modal-header">
							<h5 class="modal-title" id="DeleteModelLabel" style="font-family: 'Itim', serif; letter-spacing: 2px;">Confirm Deletion</h5>
							<button type="button" class="close" data-dismiss="modal" aria-label="Close">
								<span aria-hidden="true">&times;</span>
							</button>
						</div>
						<div class="modal-body">
							Thầy/Cô có chắc là muốn xoá lớp này không ?
						</div>
						<div class="modal-footer">
							<button type="button" class="btn btn-primary" style="font-family: 'Itim', serif" data-dismiss="modal">Close</button>
							<button type="button" class="btn btn-danger" id="confirmDeleteButton">Delete</button>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div id="mainload" class="tabcontent">
			<div class="text-center">
				<h1 class="display-4" style="font-family: 'Poppins', sans-serif">Let's Study With Us</h1>
				<p id="currentDateTime" style="font-family: 'Poppins', sans-serif"></p>
			</div>
			@{
				if (Model.isOwner)
				{
					<div class="create-content"
						 style="border: 1px solid rgb(145, 137, 137);
												border-radius: 8px;
												padding: 10px;
												height: 100%;
												margin: 20px;
												display: flex;
												align-items: center;">

						<!-- Icon hình tròn với SVG bên trong -->
						<div class="circle-icon" style="background-color: rgb(66, 133, 244); border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; margin-right: 10px; margin-left: 20px;">
							<svg focusable="false" width="24" height="24" viewBox="0 0 24 24" class="NMm5M hhikbc" style="fill: white;">
								<path d="M7 15h7v2H7zm0-4h10v2H7zm0-4h10v2H7z"></path>
								<path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-.14 0-.27.01-.4.04a2.008 2.008 0 0 0-1.44 1.19c-.1.23-.16.49-.16.77v14c0 .27.06.54.16.78s.25.45.43.64c.27.27.62.47 1.01.55.13.02.26.03.4.03h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7-.25c.41 0 .75.34.75.75s-.34.75-.75.75-.75-.34-.75-.75.34-.75.75-.75zM19 19H5V5h14v14z"></path>
							</svg>
						</div>

						<!-- Văn bản thông báo với sự kiện onclick -->
						<h3 class="notify-text" style="cursor: pointer; margin-left: 20px;" onclick="expandContent()">Thông báo nội dung nào đó cho lớp học của bạn</h3>
						@{
							if (Model.isOwner)
							{
								<div style="background-color: none; color: white; border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; margin-left: auto;">
									<button onclick="toggleClassSelection()" class="icon">
										<svg focusable="false" width="24" height="24" viewBox="0 0 24 24" class=" NMm5M">
											<path d="M19 5H4v6h2V7h13M5 19h15v-6h-2v4H5"></path>
											<path d="M16.29 10.71l-1.41-1.42L18.17 6l-3.29-3.29 1.41-1.42L21 6zm-8.58 12L3 18l4.71-4.71 1.41 1.42L5.83 18l3.29 3.29z"></path>
										</svg>
									</button>
								</div>
							}
						}
						<!-- Phần form ẩn -->
						<form id="uploadpost" action="/ClassRooms/CreatePost" method="POST" style="width: 100%; display: none;">
							<div id="expandable-form" style="display: none; width: 100%;">
								<input type="text" name="Title" id="titleInput" class="form-control" placeholder="Nhập tiêu đề" style="margin-bottom: 10px; width: 100%; border-radius: 5px; padding: 10px;" />
								<textarea name="Content" id="inputText" rows="4" class="input-textarea" oninput="checkInput()" style="width: 100%; border-radius: 5px; margin-top: 10px; padding: 10px;" placeholder="Nhập nội dung..."></textarea>
								<div style="display: flex; justify-content: flex-end; margin-top: 10px;">
									<button type="button" onclick="cancelInput()" style="margin-right: 10px; padding: 5px 10px;">Hủy</button>
									<button id="submitButton" class="disabled-button" onclick="submitInput()" style="padding: 5px 10px;" disabled>Đăng</button>
								</div>
							</div>
							<input type="hidden" name="ClassId" id="classIdInput" value="@Model.ClassRoom.Id" />
							<input type="hidden" name="UserId" id="UserIdInput" value="@Model.ClassRoom.UserId" />
						</form>
					</div>
					<div id="postContainer" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.7); z-index: 1000;">
						<div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #fff; color: black; border-radius: 8px; padding: 20px; width: 500px; height: 300px; overflow: auto;">
							<button onclick="closePostContainer()" style="float: right;margin_bottom:10%;margin-left:20px ;background-color: red; color: white; border: none; cursor: pointer; border-radius: 4px;">
								<i class="fas fa-times" style="font-size: 20px;"></i> <!-- Biểu tượng dấu X -->
							</button>
							<div class="mainList" style="margin-top:40px;">
								@foreach (var post in ViewBag.UserPosts)
								{
									<div style="margin-bottom: 10px; display: flex; justify-content: space-between; align-items: center;">
										<span style="text-align: left;">@post.Title</span>
										<button type="button" style="color: black;" onclick="showPostContent('@post.Id')">Sử dụng lại</button>
									</div>
								}
							</div>

							@foreach (var post in ViewBag.UserPosts)
							{
								<div id="postList-@post.Id" class="postList" style="display: none; margin-top: 40px;">
									<form method="post" asp-action="ReusePost" asp-controller="ClassRooms" style="display: inline;">
										<input type="hidden" name="postId" value="@post.Id" />
										<input type="hidden" name="ClassId" id="classIdInput" value="@Model.ClassRoom.Id" />
										<input type="hidden" name="UserId" id="UserIdInput" value="@Model.ClassRoom.UserId" />
										<!-- Cho phép chỉnh sửa tiêu đề và nội dung -->
										<input type="text" name="Title" class="form-control" value="@post.Title" />
										<textarea name="Content" class="input-textarea" style="width: 100%; border-radius: 5px; margin-top: 10px; padding: 10px;">@post.Content</textarea>
										<button type="submit" style="color: black;">Đăng</button>
										<button type="button" onclick="cancelReuse('@post.Id')" style="color: black; margin-left: 10px;">Hủy</button>
									</form>
								</div>
							}
						</div>
					</div>
				}
			}

			@{
				// Tạo một danh sách kết hợp các đối tượng vô danh
				var combinedList = Model.Post.Select(p => new
				{
					Type = "Post",
					Id = p.Id,
					Title = p.Title,
					Content = p.Content,
					CreatedAt = p.CreateTime,
					OwnerName = Model.Owner.Name,
					ClassRoomId = p.ClassRoomId
				})
				.Union(Model.Homework.Select(h => new
				{
					Type = "Homework",
					Id = h.Id,
					Title = h.Title,
					Content = (string)null, // Bài tập có thể không có nội dung
					CreatedAt = h.CreatedAt,
					OwnerName = Model.Owner.Name,
					ClassRoomId = h.ClassRoomId
				}))
				.OrderByDescending(item => item.CreatedAt) // Sắp xếp theo thời gian tạo
				.ToList();
			}


			@foreach (var item in combinedList)
			{
				<div class="create-content"
						style="border: 1px solid rgb(145, 137, 137);
						border-radius: 8px;
						padding: 10px;
						height: 100%;
						margin: 20px;
						display: flex;
						align-items: center;
						position: relative;">

					<div id="circle-icon-@item.Id" style="background-color: rgb(66, 133, 244); border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; margin-right: 10px; margin-left: 20px;">
						<svg focusable="false" width="24" height="24" viewBox="0 0 24 24" class="NMm5M hhikbc" style="fill: white;">
							<path d="M7 15h7v2H7zm0-4h10v2H7zm0-4h10v2H7z"></path>
							<path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-.14 0-.27.01-.4.04a2.008 2.008 0 0 0-1.44 1.19c-.1.23-.16.49-.16.77v14c0 .27.06.54.16.78s.25.45.43.64c.27.27.62.47 1.01.55.13.02.26.03.4.03h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7-.25c.41 0 .75.34.75.75s-.34.75-.75.75-.75-.34-.75-.75.34-.75.75-.75zM19 19H5V5h14v14z"></path>
						</svg>
					</div>

					<div id="post-info-@item.Id" style="display: flex; flex-direction: column; margin-left: 10px; margin-top: -3.5px;">

					@if (item.Type == "Post")
					{
						<h3 style="font-size: 16px; margin-bottom: 0px;">đã đăng một thông báo mới: @item.Title</h3>
					}
					else
					{
						<h3 style="font-size: 16px; margin-bottom: 0px;">@item.OwnerName đã đăng một bài tập mới: @item.Title</h3>
					}

					@if (item.Type == "Post")
					{
						string content = item.Content;
						string pattern = @"(https?://[a-zA-Z0-9.-]+(?:/[^\s]*)?)"; // Regex nhận diện URL đầy đủ với đường dẫn
						var parts = System.Text.RegularExpressions.Regex.Split(content, pattern); // Tách nội dung
						<p style="font-size: 16px; margin-bottom: 0px;">
							@foreach (var part in parts)
							{
								if (System.Text.RegularExpressions.Regex.IsMatch(part, pattern)) // Nếu là link hợp lệ
								{
													<a href="@part" target="_blank" style="color: #007bff; text-decoration: none;">@part</a>
								}
								else // Nếu không phải là link
								{
									@part
								}
							}
						</p>
					}
						<p class="post-created-at" style="font-size: 14px; color: gray; margin-top: 0px;">@item.CreatedAt.ToString("dd/MM/yyyy - HH:mm:ss")</p>
					</div>

					@{
						if (Model.isOwner && item.Type == "Post")
						{
							<div id="post-options-@item.Id" style="margin-left: auto; cursor: pointer; display: flex; align-items: center; height: 100%;">
								<button id="post-options-@item.Id" class="icon">
									<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
										<circle cx="12" cy="5" r="2" fill="gray"></circle>
										<circle cx="12" cy="12" r="2" fill="gray"></circle>
										<circle cx="12" cy="19" r="2" fill="gray"></circle>
									</svg>
								</button>
								<div class="options-menu" style="display: none;padding:10px; top: 85px; right:40px; position: absolute; background-color: white; border: 1px solid gray; border-radius: 5px; z-index: 10;">
									<a class="btn" href="javascript:void(0);" onclick="showEditForm('@item.Id')">Sửa</a>
									<a class="btn" asp-action="Delete" asp-controller="Posts" asp-route-id="@item.Id" asp-route-classId="@item.ClassRoomId" onclick="return confirm('Bạn có chắc muốn xóa không ?')">Xóa</a>
								</div>
							</div>
							<!-- Form ẩn để chỉnh sửa bài viết -->
							<div id="editForm-@item.Id" style="display: none; margin-top: 10px; width: 100%;">
								<form action="/Posts/Editpost" method="POST">
									<input type="hidden" name="Id" value="@item.Id" />
									<input type="text" name="Title" value="@item.Title" class="form-control" placeholder="Nhập tiêu đề" style="margin-bottom: 10px;" />
									<textarea name="Content" rows="4" class="input-textarea" style="width: 100%; border-radius: 5px; margin-top: 10px; padding: 10px;" placeholder="Nhập nội dung">@item.Content</textarea>
									<div style="display: flex; justify-content: flex-end; margin-top: 10px;">
										<button type="button" onclick="hideEditForm('@item.Id')" style="margin-right: 10px;">Hủy</button>
										<button type="submit" class="btn btn-success">Lưu</button>
									</div>
									<input type="hidden" name="ClassId" id="classIdInput" value="@Model.ClassRoom.Id" />
									<input type="hidden" name="UserId" id="UserIdInput" value="@Model.ClassRoom.UserId" />
								</form>
							</div>
						}
					}
				</div>
			}
		</div>
	</div>
</div>
@* ==================================SCRIPT======================================================*@
<script>
	function showPostContent(postId) {
		// Hide all post lists
		const postLists = document.querySelectorAll('.postList');
		postLists.forEach(postList => {
			postList.style.display = 'none'; // Hide all postLists
		});

		// Show the specific postList related to the clicked button
		const postListToShow = document.getElementById(`postList-${postId}`);
		if (postListToShow) {
			postListToShow.style.display = 'block'; // Show the specific postList
		}

		// Hide the main list (you may need to adjust the selector based on your structure)
		const mainList = document.querySelector('.mainList'); // Assuming you wrap your main list in a div with class "mainList"
		if (mainList) {
			mainList.style.display = 'none'; // Hide the main list
		}
	}

	function cancelReuse(postId) {
		// Hide the specific postList when cancel is clicked
		const postListToHide = document.getElementById(`postList-${postId}`);
		if (postListToHide) {
			postListToHide.style.display = 'none'; // Hide the postList
		}

		// Optionally show the main list again
		const mainList = document.querySelector('.mainList'); // Again, adjust if necessary
		if (mainList) {
			mainList.style.display = 'block'; // Show the main list
		}
	}

</script>
<script>
	function toggleClassSelection() {
		var form = document.getElementById("postContainer");
		// Check display status and toggle visibility
		if (form.style.display === "none" || form.style.display === "") {
			form.style.display = "block"; // Show the form
		} else {
			form.style.display = "none"; // Hide the form
		}
	}

	function closePostContainer() {
		document.getElementById("postContainer").style.display = "none";
	}
</script>
<script>
	function showEditForm(postId) {
		// Ẩn tất cả các form chỉnh sửa khác
		var forms = document.querySelectorAll('[id^="editForm-"]');
		forms.forEach(function (form) {
			form.style.display = 'none';
		});

		// Hiển thị form chỉnh sửa cho bài viết cụ thể
		var editForm = document.getElementById('editForm-' + postId);
		if (editForm) {
			editForm.style.display = 'block';
		}

		// Ẩn icon và phần thông tin của bài viết khi hiển thị form
		var circleIcon = document.getElementById('circle-icon-' + postId);
		var postInfo = document.getElementById('post-info-' + postId);
		var postOptions = document.getElementById('post-options-' + postId);

		if (circleIcon) {
			circleIcon.style.display = 'none';
		}
		if (postInfo) {
			postInfo.style.display = 'none';
		}
		if (postOptions) {
			postOptions.style.display = 'none';
		}
	}

	function hideEditForm(postId) {
		// Ẩn form chỉnh sửa khi người dùng nhấn nút Hủy
		var editForm = document.getElementById('editForm-' + postId);
		if (editForm) {
			editForm.style.display = 'none';
		}

		// Hiển thị lại icon và phần thông tin của bài viết khi ẩn form
		var circleIcon = document.getElementById('circle-icon-' + postId);
		var postInfo = document.getElementById('post-info-' + postId);
		var postOptions = document.getElementById('post-options-' + postId);

		if (circleIcon) {
			circleIcon.style.display = 'flex'; // Đặt lại display thành flex
		}
		if (postInfo) {
			postInfo.style.display = 'flex'; // Đặt lại display thành flex
		}
		if (postOptions) {
			postOptions.style.display = 'flex'; // Đặt lại display thành flex
		}
	}
</script>@*form sửa*@
<script>
	const iconButtons = document.querySelectorAll('.icon'); // Chọn tất cả các phần tử có class "icon"

	iconButtons.forEach((iconButton) => {
		const optionsMenu = iconButton.nextElementSibling; // Menu liền kề với icon

		// Sự kiện click để hiển thị hoặc ẩn menu
		iconButton.addEventListener('click', (event) => {
			event.stopPropagation();

			// Đóng tất cả các menu trước khi mở menu của icon hiện tại
			document.querySelectorAll('.options-menu').forEach(menu => {
				menu.style.display = 'none';
			});

			// Chuyển đổi hiển thị của menu liền kề
			optionsMenu.style.display = optionsMenu.style.display === 'none' || optionsMenu.style.display === '' ? 'block' : 'none';
		});
	});

	// Đóng menu nếu nhấp ra ngoài
	document.addEventListener('click', () => {
		document.querySelectorAll('.options-menu').forEach(menu => {
			menu.style.display = 'none';
		});
	});
</script>@*option xóa & sửa*@
<script>
	function expandContent() {
		const expandableForm = document.getElementById('expandable-form');
		const uploadPostForm = document.getElementById('uploadpost');
		const notifyText = document.querySelector('.notify-text'); // Dòng thông báo
		const circleIcon = document.querySelector('.circle-icon'); // Icon hình tròn
		const Icon = document.querySelector('.icon');

		expandableForm.style.display = 'block'; // Hiện form
		uploadPostForm.style.display = 'block'; // Hiện toàn bộ form
		notifyText.style.display = 'none'; // Ẩn dòng text
		circleIcon.style.display = 'none'; // Ẩn icon hình tròn
		Icon.style.display = 'none';
	}

	function cancelInput() {
		const expandableForm = document.getElementById('expandable-form');
		const uploadPostForm = document.getElementById('uploadpost');
		const notifyText = document.querySelector('.notify-text'); // Dòng thông báo
		const circleIcon = document.querySelector('.circle-icon'); // Icon hình tròn
		const Icon = document.querySelector('.icon');

		expandableForm.style.display = 'none'; // Hiện form
		uploadPostForm.style.display = 'none'; // Hiện toàn bộ form
		notifyText.style.display = 'block'; // Ẩn dòng text
		circleIcon.style.display = 'flex'; // Ẩn icon hình tròn
		Icon.style.display = 'flex';
	}

	function checkInput() {
		const titleInput = document.getElementById('titleInput').value.trim();
		const contentInput = document.getElementById('inputText').value.trim();
		const submitButton = document.getElementById('submitButton');

		if (titleInput === '' && contentInput === '') {
			submitButton.disabled = true;
			submitButton.classList.remove('active-button');
			submitButton.classList.add('disabled-button');
		} else {
			submitButton.disabled = false;
			submitButton.classList.remove('disabled-button');
			submitButton.classList.add('active-button');
		}
	}


	function submitInput() {
		document.getElementById('uploadpost').submit();
	}
</script>@*post*@
<script>
	function openTab(evt, tabName) {
		var i, tabcontent, tablinks;
		tabcontent = document.getElementsByClassName("tabcontent");
		tablinks = document.getElementsByClassName("tab");

		// Kiểm tra nếu tab hiện tại đang mở
		var currentOpenTab = document.querySelector(".tabcontent[style='display: block;']");
		if (currentOpenTab && currentOpenTab.id === tabName) {
			// Nếu tab đã mở và nhấp lại thì đóng tab đó và hiện tab 'mainload'
			currentOpenTab.style.display = "none";
			document.getElementById('mainload').style.display = "block";
			evt.currentTarget.classList.remove("active");
		} else {
			// Ẩn tất cả các tab trước
			for (i = 0; i < tabcontent.length; i++) {
				tabcontent[i].style.display = "none";
			}
			// Loại bỏ class 'active' từ tất cả các tablinks
			for (i = 0; i < tablinks.length; i++) {
				tablinks[i].classList.remove("active");
			}
			// Hiển thị tab được chọn và thêm class 'active'
			document.getElementById(tabName).style.display = "block";
			evt.currentTarget.classList.add("active");
		}
	}

	document.addEventListener("DOMContentLoaded", function () {
		openTab(event, 'mainload'); // Mở tab mainload khi tải trang
	});

</script> @* Chuy?n tab trên trang *@
<script>
	function reloadLecture() {
		var xhr = new XMLHttpRequest();
		xhr.open('GET', '/ClassRooms/GetLecture?ClassId=' + encodeURIComponent(document.getElementById('classIdInput').value), true);
		xhr.onload = function () {
			if (xhr.status === 200) {
				// L?y d? li?u m?i t? ph?n h?i AJAX
				var newData = xhr.responseText;

				// C?p nh?t n?i dung c?a ph?n t? trên trang web
				document.getElementById('lectureContainer').innerHTML = newData;
			} else {
				// X? lý l?i
				console.error('Error:', xhr.statusText);
			}
		};
		xhr.send();
	}
</script> @* T?o bài gi?ng m?i *@
<script src="https://apis.google.com/js/api.js"></script>
<script>
	function validateAndSubmit(requiredFormat, assignmentId, event) {
		event.preventDefault();
		var form = event.target; // L?y bi?u m?u t? s? ki?n
		var fileInput = form.querySelector("input[type='file']");
		var fileName = fileInput.value;

		if (requiredFormat.toLowerCase() === 'allfile') {
			// N?u tùy ch?n "allfile" du?c ch?n, không c?n ki?m tra d?nh d?ng file
			if (fileName === '') {
				// N?u không ch?n file, hi?n th? thông báo l?i
				alert("Vui lòng chọn 1 file để nộp.");
				return false; // Ngan form du?c g?i di
			}
			// N?u dã ch?n file, cho phép form du?c g?i di
			form.submit(); // G?i form di
		} else {
			// Ki?m tra d?nh d?ng file n?u không ph?i là "allfile"
			var fileExtension = fileName.split('.').pop().toLowerCase();
			// Ki?m tra xem d?nh d?ng file có phù h?p không
			if (fileExtension === requiredFormat.toLowerCase()) {
				// N?u dúng d?nh d?ng, ti?n hành n?p bài
				form.submit(); // G?i form di
			} else {
				// N?u không dúng d?nh d?ng, hi?n th? thông báo l?i
				alert("Định dạng file không đúng. Vui lòng chọn file có định dạng " + requiredFormat);
			}
		}
	}



	function previewFile(assignmentId) {
		var fileInput = document.getElementById('FileInput_' + assignmentId);
		var file = fileInput.files[0];
		var fileURL = URL.createObjectURL(file);
		window.open(fileURL, '_blank');
	}
</script> @* N?p bài t?p theo d?nh d?ng file yêu c?u *@
<script>
	function Showtaobaitap() {
		var uploadButton = document.getElementById("uploadButton");
		uploadButton.style.display = "none"; // ?n button khi form du?c hi?n th?

		var uploadForm = document.getElementById("uploadbaitap");
		uploadForm.style.display = "block"; // Hi?n th? form khi nút du?c nh?n

		// Hi?n th? ph?n nh?p tiêu d?
		var titleInput = document.getElementById("titleInput");
		titleInput.style.display = "block";

		// Hi?n th? ph?n nh?p mô t?
		var descriptionInput = document.getElementById("descriptionInput");
		descriptionInput.style.display = "block";

		var attachmentForm = document.getElementById("attachmentForm");
		attachmentForm.style.display = "block"; // Hi?n th? form dính kèm
	}

	document.querySelector('.close-btn').addEventListener('click', () => {
		document.getElementById("uploadbaitap").style.display = "none"; 
		document.getElementById("uploadButton").style.display = "block";
	});

</script> @* T?o bài t?p m?i *@
<script>
	async function calculateChunkHash(chunk) {
		const arrayBuffer = await chunk.arrayBuffer();
		const wordArray = CryptoJS.lib.WordArray.create(arrayBuffer);
		return CryptoJS.SHA256(wordArray).toString();
	}

	async function calculateFileHash(file) {
		const chunkSize = 10 * 1024 * 1024; // 10 MB
		const chunkCount = Math.ceil(file.size / chunkSize);
		const sha256 = CryptoJS.algo.SHA256.create();

		for (let i = 0; i < chunkCount; i++) {
			const start = i * chunkSize;
			const end = Math.min(start + chunkSize, file.size);
			const chunk = file.slice(start, end);
			const arrayBuffer = await chunk.arrayBuffer();
			const wordArray = CryptoJS.lib.WordArray.create(arrayBuffer);
			sha256.update(wordArray);
		}

		return sha256.finalize().toString();
	}

	function showModal() {
		const modal = document.getElementById('uploadModal');
		const backdrop = document.getElementById('modalBackdrop');
		modal.classList.add('show');
		backdrop.classList.add('show');
	}

	function hideModal() {
		const modal = document.getElementById('uploadModal');
		const backdrop = document.getElementById('modalBackdrop');
		modal.classList.remove('show');
		backdrop.classList.remove('show');
	}

	function showSuccessMessage() {
		const progressText = document.getElementById('progressText');
		const successText = document.getElementById('successText');
		progressText.style.display = 'none';
		successText.style.display = 'block';
	}

	function resetProgress() {
		const progressText = document.getElementById('progressText');
		const successText = document.getElementById('successText');
		const progressBar = document.getElementById('progressBar');
		const loader = document.getElementById('loader');
		loader.style.display = 'block';
		progressBar.style.display = 'none';


		progressBar.value = 0;
		progressText.innerText = '0%';
		progressText.style.display = 'block';
		successText.style.display = 'none';
	}


	async function uploadFile() {
		const attactURL = document.getElementById('attactURL');
		const fileInput = document.getElementById('fileInput');
		const file = fileInput.files[0];
		if (!file) {
			alert('Please select a file.');
			return;
		}


		showModal();

		const fileHash = await calculateFileHash(file);
		console.log('File hash:', fileHash); // Log the file hash

		const showProgress = document.getElementById('progressBar');
		const loader = document.getElementById('loader');
		loader.style.display = 'none';
		showProgress.style.display = 'block';

		const chunkSize = 10 * 1024 * 1024; // 10 MB
		const chunkCount = Math.ceil(file.size / chunkSize);
		let uploadedChunks = 0;

		function updateProgress(uploadedChunks, chunkCount) {
			const percentage = (uploadedChunks / chunkCount) * 100;
			document.getElementById('progressBar').value = percentage;
			document.getElementById('progressText').innerText = `${percentage.toFixed(2)}%`;
		}

		async function uploadChunk(chunk, index, fileName) {
			const chunkHash = await calculateChunkHash(chunk);
			return new Promise((resolve, reject) => {
				const xhr = new XMLHttpRequest();
				xhr.open('POST', '/ClassRooms/UploadChunk', true);
				xhr.onload = function () {
					if (xhr.status === 200) {
						uploadedChunks++;
						updateProgress(uploadedChunks, chunkCount);
						resolve();
					} else {
						reject(new Error(`Error uploading chunk: ${xhr.responseText}`));
					}
				};
				xhr.onerror = function () {
					reject(new Error('Network error while uploading chunk'));
				};

				const formData = new FormData();
				formData.append('chunk', chunk);
				formData.append('index', index);
				formData.append('fileName', fileName);
				formData.append('chunkHash', chunkHash);
				xhr.send(formData);
			});
		}

		async function uploadChunks() {
			for (let i = 0; i < chunkCount; i++) {
				const start = i * chunkSize;
				const end = Math.min(start + chunkSize, file.size);
				const chunk = file.slice(start, end);
				try {
					await uploadChunk(chunk, i, file.name);
				} catch (error) {
					console.error(error);
					alert('Error uploading file. Please try again.');
					return;
				}
			}
			completeUpload(file.name, fileHash);
		}

		function completeUpload(fileName, fileHash) {
			const xhr = new XMLHttpRequest();
			xhr.open('POST', '/ClassRooms/CompleteUpload', true);
			xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
			xhr.onload = function () {
				if (xhr.status === 200) {
					attactURL.value = fileName;

					showSuccessMessage();
					setTimeout(hideModal, 2000);
					setTimeout(resetProgress, 3000);
					document.getElementById('TenFile').innerHTML = `<a href="/Uploads/BAITAP/${fileName}" target="_blank" >${fileName}</a>`

				} else {
					console.error('Error completing upload:', xhr.responseText);
				}
			};
			xhr.onerror = function () {
				console.error('Network error while completing upload');
			};

			const request = JSON.stringify({ fileName: fileName, fileHash: fileHash });
			xhr.send(request);
		}

		uploadChunks();
	}
</script> @*Upload file lớn*@
<script>
	// L?ng nghe s? ki?n khi ngày deadline thay d?i
	document.getElementById("deadlineInput").addEventListener("change", function () {
		// L?y giá tr? c?a ngày deadline
		var deadline = this.value;
	});
</script> @* Chọn deadline *@
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/chat.js"></script>
<script src="https://cdn.jsdelivr.net/npm/he@1.2.0/he.min.js"></script>
<script>
	document.addEventListener("DOMContentLoaded", async function () {
		console.log(document.getElementById('FileInput'));
		const connection = new signalR.HubConnectionBuilder()
			.withUrl("/chathub")
			.build();

		connection.onclose(function () {
			console.log("SignalR connection closed.");
		});

		connection.start().then(function () {
			console.log("SignalR connected successfully.");
		}).catch(function (err) {
			return console.error("SignalR connection error:", err.toString());
		});
		try {
			var encodedName = "@((await _userManager.GetUserAsync(User)).Name)";
			var decodedName = he.decode(encodedName);
			document.getElementById("userInput").value = (@User.Identity.Name + " _ " + decodedName);
		} catch (error) {
		}
	});

	function encodeHTML(str) {
		var div = document.createElement('div');
		div.appendChild(document.createTextNode(str));
		return div.innerHTML;
	}

	connection.on("ReceiveMessage", function (user, message, fileUrl, urlavt) {
		var li = document.createElement("li");
		var classId = document.getElementById("classId").value;

		const currentTime = new Date();
		const year = currentTime.getFullYear();
		const month = currentTime.getMonth() + 1;
		const day = currentTime.getDate();
		const hours = currentTime.getHours();
		const minutes = currentTime.getMinutes();
		const seconds = currentTime.getSeconds();
		const formatTime = `${hours}:${minutes}:${seconds} - ${day}/${month}/${year}`;

		var encodedUser = encodeHTML(user);
		var encodedMessage = encodeHTML(message);

		var nameElement = document.createElement("h3");
		nameElement.style.cssText = "font-size: 18px; font-weight: 600; margin: 0;";
		nameElement.textContent = encodedUser;

		var messageElement = document.createElement("p");
		messageElement.style.cssText = "font-size: 17px; margin: 0;";
		messageElement.textContent = encodedMessage;

		var timeElement = document.createElement("p");
		timeElement.style.cssText = "font-size: 13px; margin-top: 5px; margin: 0;";
		timeElement.textContent = `(${formatTime})`;

		if (fileUrl) {
			var fileLink = document.createElement("a");
			fileLink.href = fileUrl;
			fileLink.target = "_blank";
			fileLink.textContent = "[Open File]";
			messageElement.appendChild(fileLink);
		}

		var avatarElement = document.createElement("img");
		avatarElement.style.cssText = "width: 100%; height: 100%; object-fit: cover;border-radius: 50%";
		avatarElement.src = `/Imgs_avtUser/${urlavt}`;
		avatarElement.alt = "Avatar";

		var avatarBox = document.createElement("div");
		avatarBox.classList.add("avatar");
		avatarBox.style.cssText = "width: 50px; height: 50px; background-color: #ddd; border-radius: 50%; text-align: center; line-height: 40px; margin-left: 10px; font-size: 18px; font-weight: bold; color: #555;";
		avatarBox.appendChild(avatarElement);

		var messageBox = document.createElement("div");
		messageBox.classList.add("message-box");
		messageBox.appendChild(nameElement);
		messageBox.appendChild(messageElement);
		messageBox.appendChild(timeElement);


		li.style.cssText = "font-family: 'JetBrains Mono', serif; ";


		var userInput = document.getElementById("userInput").value;
		if (encodedUser === userInput) {
			// Nếu người gửi là người hiện tại, hiển thị bên trái (current-user)
			li.classList.add("current-user");

		} else {
			li.classList.add("other-user");
			li.appendChild(avatarBox);
		}
		li.appendChild(messageBox);
		const messagesList = document.querySelector(".message-list");
		messagesList.appendChild(li);

		setTimeout(() => {
			messagesList.scrollTop = messagesList.scrollHeight;
		}, 0);

	});

	function getCurrentTime() {
		const currentTime = new Date();
		const year = currentTime.getFullYear();
		const month = currentTime.getMonth() + 1;
		const day = currentTime.getDate();
		const hours = currentTime.getHours();
		const minutes = currentTime.getMinutes();
		const seconds = currentTime.getSeconds();
		return `${hours}:${minutes}:${seconds} - ${day}/${month}/${year}`;
	}

	function getClassId() {
		return document.getElementById("classId").value;
	}

	async function sendMessage() {
		var user = document.getElementById("userInput").value;
		var message = document.getElementById("messageInput").value;
		var classId = document.getElementById("classId").value;
		var formatTime = getCurrentTime();
		var FileInput = document.getElementById("FileInput");
		var fileUrl = null;
		var Urlavt = "@((await _userManager.GetUserAsync(User))?.UrlAvt)";
		if (FileInput.files.length > 0) {
			var file = FileInput.files[0];

			var formData = new FormData();
			formData.append("file", file);

			try {
				console.log("Đang gửi file tới API...");
				let response = await fetch('/api/upfilemessage', {
					method: 'POST',
					body: formData
				});

				if (response.ok) {
					fileUrl = await response.text();
				} else {
					console.error('Lỗi khi upload file.');
					return;
				}
			} catch (err) {
				console.error('Lỗi khi gửi file: ' + err.toString());
				return;
			}
		}
		if (message.trim() !== "" || fileUrl) {
			try {
				await connection.invoke("SendMessage", user, message, formatTime, classId, Urlavt, fileUrl).catch(function (err) {
					console.error("Lỗi khi gửi tin nhắn:", err.toString());
				});

				// Xóa nội dung sau khi gửi
				document.getElementById("messageInput").value = '';
				FileInput.value = '';
			} catch (err) {
				console.error("Lỗi khi gửi tin nhắn:", err.toString());
			}
		}
	}

	document.getElementById('FileInput').addEventListener('change', function () {
		var fileInput = document.getElementById('FileInput');
		var fileNameSpan = document.getElementById('messageInput');

		if (fileInput.files.length > 0) {
			const fileName = fileInput.files[0].name; // Lấy tên file

			// Hiển thị tên file trong khung nhập tin nhắn
			if (messageInput.value.trim() === '') {
				messageInput.value = fileName; // Nếu khung trống, hiển thị tên file
			} else {
				messageInput.value += ` [${fileName}]`; // Nếu có nội dung, thêm tên file vào sau
			}
		} else {
			console.log('Không có file nào được chọn.');
		}
	});


	document.getElementById("sendButton").addEventListener("click", async function (event) {
		await sendMessage();
	});

	document.getElementById("messageInput").addEventListener("keydown", async function (event) {
		if (event.key == 'Enter' && !event.shiftKey) {
			event.preventDefault();
			await sendMessage();
		}
	});

	window.onload = function () {
		const messagesList = document.querySelector(".message-list");

		if (messagesList) {
			// Cuộn thanh trượt xuống cuối
			messagesList.scrollTop = messagesList.scrollHeight;
		}
	};


</script> @* G?i tin nh?n *@
<script>
	function getListSV() {
		var classId = document.getElementById("classId").value;
		$.ajax({
			url: '/ClassRooms/GetListSV?classId=' + classId,
			type: 'GET',
			dataType: 'json',
			success: function (response) {
				if (response.success) {
					displaySV(response.students);
				} else {
					console.error('Error fetching student list:', response.error);
				}
			},
			error: function (xhr, status, error) {
				console.error('Error fetching student list:', error);
			}
		});
	}


	$(document).ready(function () {
		getListSV();
	});

	function openPopup(name, mssv, email, urlAvt) {
		document.getElementById("student-name").textContent = name;
		document.getElementById("student-mssv").textContent = mssv;
		document.getElementById("student-email").textContent = email;

		const imageElement = document.getElementById("student-image");
		imageElement.src = `/Imgs_avtUser/${urlAvt}`;
		imageElement.alt = `Image of ${name}`;

		document.getElementById("popup").style.display = "block";
	}

	function closePopup() {
		document.getElementById("popup").style.display = "none";
	}

</script>@*chọn nhóm*@
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
@{
	var settings = new Newtonsoft.Json.JsonSerializerSettings
			{
				ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
			};
	var serializedListUserGroup = Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.ListUserGroup, settings);
}
<script>
	const listUserGroup = @Html.Raw(serializedListUserGroup);
	const currentUser = '@user.Id';
</script>

<script>
	function getListStudents() {
		var classId = document.getElementById("classId").value;
		$.ajax({
			url: '/ClassRooms/GetListSV?classId=' + classId,
			type: 'GET',
			dataType: 'json',
			success: function (response) {
				if (response.success) {
					displayStudents(response.students);
				} else {
					console.error('Error fetching student list:', response.error);
				}
			},
			error: function (xhr, status, error) {
				console.error('Error fetching student list:', error);
			}
		});
	}

	function displayStudents(students) {
		var listHtml = '<div class="container_listsv">';
		var tongslsv = students.length;
		listHtml += '<p class="header_listsv">Sĩ số : ' + tongslsv + ' sinh viên</p>';
		listHtml += '<hr class="hr_listsv">';

		listHtml += '<div class="row_listsv">';
		students.forEach(function (student) {
			listHtml += '<div class="card_listsv">';
			listHtml += '<img class="img_listsv" src="/Imgs_avtUser/' + student.urlAvt + '" alt="No Image">';
			listHtml += '<p class="p_listsv">' + student.mssv + '</p>';
			listHtml += '<p class="p_listsv">' + student.name + '</p>';

			// Kiểm tra nếu student.id trùng với userid đang đăng nhập
			if (String(student.id) === String(currentUser)) {
				// Không hiển thị nút nếu là user đang đăng nhập
				listHtml += '</div>'; // Kết thúc sớm
				return; // Tiếp tục vòng lặp
			}

			// Kiểm tra xem sinh viên có trong danh sách nhóm hay không
			if (listUserGroup !== null) {
				const isInGroup = listUserGroup.some(item => item.UserId === student.id);
				if (isInGroup) {
					listHtml += '<button class="invite_button" style="background-color: green;">Bạn cùng nhóm</button>';
				} else {
					listHtml += '<button class="invite_button" onclick="sendInvite(\'' + student.id + '\')">Bạn không cùng nhóm</button>';
				}
			} else {
				listHtml += '<button class="invite_button" onclick="sendInvite(\'' + student.id + '\')">Gửi lời mời tạo nhóm</button>';
			}

			listHtml += '</div>';
		});


		listHtml += '</div>';

		listHtml += '</div>';
		$('#listsv1').html(listHtml);;
	}
	function filterStudents() {
		var input = document.getElementById('searchsvInput');
		var filter = input.value.toLowerCase(); // Chuyển về chữ thường để so sánh
		var container = document.querySelector('.row_listsv');
		var cards = container.getElementsByClassName('card_listsv'); // Lấy tất cả các card sinh viên

		for (var i = 0; i < cards.length; i++) {
			var name = cards[i].querySelector('.p_listsv:nth-child(3)').textContent.toLowerCase(); // Lấy tên sinh viên
			var mssv = cards[i].querySelector('.p_listsv:nth-child(2)').textContent.toLowerCase(); // Lấy MSSV
			// Hiển thị hoặc ẩn dựa trên kết quả tìm kiếm
			if (name.includes(filter) || mssv.includes(filter)) {
				cards[i].style.display = ''; // Hiển thị
			} else {
				cards[i].style.display = 'none'; // Ẩn
			}
		}
	}

	async function sendInvite(targetUserId) {
		if (!targetUserId) {
			alert("Please enter a friend ID.");
			return; // Dừng lại nếu không có ID
		}
		var classId = document.getElementById("classId").value;
		try {
			const response = await fetch("/Notifications/SendFriendRequest", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({ targetUserId: targetUserId, classid: classId }),
			});

			if (!response.ok) {
				const errorData = await response.json();
				console.error("Error:", errorData.message);
				alert(`Failed: ${errorData.message}`);
				return;
			}

			const data = await response.json();
			toastr.success(data.message, 'Thành công', { timeOut: 3000 });
		} catch (error) {
			console.error("Unexpected Error:", error);
			alert("An unexpected error occurred.");
		}

	}

	$(document).ready(function () {
		getListStudents();
	});
</script> @* L?y dssv trong l?p và hi?n th? lên *@
<script>
	function updateDateTime() {
		var currentDateTime = new Date();
		var hours = currentDateTime.getHours();
		var minutes = currentDateTime.getMinutes();
		var seconds = currentDateTime.getSeconds();
		var day = currentDateTime.getDate();
		var month = currentDateTime.getMonth() + 1; // Tháng b?t d?u t? 0
		var year = currentDateTime.getFullYear();
		var weekday = currentDateTime.getDay();

		hours = (hours < 10) ? "0" + hours : hours;
		minutes = (minutes < 10) ? "0" + minutes : minutes;
		seconds = (seconds < 10) ? "0" + seconds : seconds;

		day = (day < 10) ? "0" + day : day;
		month = (month < 10) ? "0" + month : month;

		var weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
		var weekdayName = weekdays[weekday];

		// Ð?nh d?ng th?i gian
		var formattedDateTime = weekdayName + " • " + day + "/" + month + "/" + year + " " + hours + ":" + minutes + ":" + seconds;

		// Hi?n th? th?i gian
		document.getElementById("currentDateTime").innerText = formattedDateTime;
	}

	// C?p nh?t th?i gian m?i giây
	setInterval(updateDateTime, 1000);

	// G?i hàm updateDateTime l?n d?u tiên d? hi?n th? th?i gian ngay t? khi trang du?c t?i
	updateDateTime();
</script> @* T?o d?ng h? *@

<script>
	const btnCopy = document.getElementById("btnCopy");
	const input = document.getElementById("contentcopy");
	const icon = document.getElementById("icon");

	btnCopy.addEventListener('click', async () => {
		if (!input.value) {
			return;
		}

		try {
			await navigator.clipboard.writeText(input.value);
			toastr.info('Copied', '', { timeOut: 3000 });
			icon.textContent = 'check_circle';  // Change icon to check mark
			setTimeout(() => {
				icon.textContent = 'content_copy';  // Revert back to copy icon after 2 seconds
			}, 2000);
		} catch (err) {
			console.error('Failed to copy text: ', err);
		}
	});
</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
	$(document).ready(function () {
		$('#diemDanhBtn').on('click', function (event) {
			event.preventDefault(); // Prevent the default link action
			var classId = document.getElementById("classId").value;
			var roomOnlineUrl = $(this).attr('href');


			$.post("/ClassRooms/DiemDanhIn", { classId: classId }, function (data) {
				if (data.success) {
					console.log('Điểm danh thành công');
					window.open(roomOnlineUrl, '_blank');
				}
				else {
					console.log(data.error);
					alert(data.error);
					console.log('Điểm danh thất bại');
				}
			});
		});
	});
</script> @* Ði?m danh *@
<script src="~/js/resumable.js"></script>
<script>
	// Tạo đối tượng Resumable.js
	var r = new Resumable({
		target: '/upload/UploadChunk',
		chunkSize: 1 * 1024 * 1024, // 1MB mỗi chunk
		simultaneousUploads: 3,
		testChunks: true,
		throttleProgressCallbacks: 1,
		query: {} // Thêm tham số sau khi người dùng chọn thư mục
	});
	// Biến để theo dõi trạng thái tên file
	var fileNameSet = false;

	// Hàm gán sự kiện cho button
	function setupBrowseButton(buttonId, folderType) {
		var button = document.getElementById(buttonId);
		var classId = document.getElementById("classId").value;
		r.assignBrowse(button); // Gán sự kiện chọn file cho button

		button.addEventListener('click', function () {
			// Đặt thư mục
			r.opts.query.folderType = folderType;
			r.opts.query.ClassId = classId;

			// Nếu là BAIGIANG và chưa nhập tên file
			if (folderType === 'BAIGIANG' && !fileNameSet) {
				var customFileName = prompt("Nhập tên file cho BAIGIANG:");
				if (customFileName) {
					r.opts.query.fileName = customFileName; // Đặt tên file
					fileNameSet = true; // Đánh dấu là đã nhập tên
				} else {
					alert("Tên file không thể để trống. Upload bị hủy."); // Thông báo nếu không nhập tên
					return; // Dừng hàm nếu không có tên
				}
			}
		});

		// Lắng nghe sự kiện khi file được thêm và bắt đầu upload
		r.on('fileAdded', function (file) {
			// Kiểm tra định dạng file
			var fileExtension = file.fileName.split('.').pop().toLowerCase();
			if (fileExtension !== 'pdf') {
				alert("Chỉ được phép upload file PDF. Upload bị hủy.");
				r.removeFile(file); // Loại bỏ file không hợp lệ khỏi danh sách
				return;
			}

			console.log('Bắt đầu upload file:', file.fileName);
			r.upload(); // Bắt đầu upload
		});
	}

	// Hàm để reset tên file
	function resetFileName() {
		r.opts.query.fileName = null; // Reset tên file
		fileNameSet = false; // Đặt lại trạng thái
	}

	// Gọi hàm reset khi cần, ví dụ: thêm một nút reset

	// Thiết lập các button

	setupBrowseButton('browseBaiGiang', 'BAIGIANG');

	// Lắng nghe tiến trình upload
	r.on('fileProgress', function (file) {
		var progress = Math.floor(file.progress() * 100);
		document.getElementById('progressBar').innerText = 'Tiến trình: ' + progress + '%';
		const progressBar = document.getElementById('progressBar_btnBaiGiang');
		const txtUpload = document.querySelector('.txt-upload_btnBaiGiang');
		const borderbtn = document.querySelector('.border_btnBaiGiang');

		setTimeout(() => {
			txtUpload.innerText = 'Uploading...';
		}, 1000);
		// Cập nhật viền xanh theo tiến trình
		if (progressBar) {
			borderbtn.style.display = 'none';
			progressBar.style.strokeDasharray = `${progress} ${100 - progress}`;
			txtUpload.innerText = progress + '%';
		}
	});

	// Xử lý khi hoàn thành upload
	r.on('fileSuccess', function (file, message) {
		console.log('Hoàn thành upload file:', file.fileName);
		const progressBar = document.getElementById('progressBar_btnBaiGiang');
		const button = document.querySelector('.button_btnBaiGiang');
		const txtUpload = document.querySelector('.txt-upload_btnBaiGiang');
		const borderbtn = document.querySelector('.border_btnBaiGiang');

		// Đặt stroke-dasharray thành 100% khi hoàn thành
		if (progressBar) {
			progressBar.style.strokeDasharray = `100 0`;
			txtUpload.innerText = 'Hoàn thành';
		}

		resetFileName()
		// Chờ 2 giây trước khi reload lecture
		setTimeout(() => {
			reloadLecture();
			// Đặt lại trạng thái button về mặc định
			if (button && txtUpload) {
				button.classList.remove('focus'); // Xóa trạng thái focus nếu có
				borderbtn.style.display = 'block';
				txtUpload.innerText = 'Upload';
				txtUpload.style.opacity = '1'; // Hiển thị lại text "Upload"
				progressBar.style.strokeDasharray = `0 100`; // Reset progress bar
			}
		}, 2000);
	});

	// Xử lý lỗi
	r.on('fileError', function (file, message) {
		console.error('Lỗi khi upload file:', file.fileName, message);
	});
</script> @*Truyền file lớn BAIGIANG*@
<script>
	function startSpeechRecognition() {
		// Kiểm tra nếu trình duyệt hỗ trợ API Nhận dạng giọng nói
		const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

		if (!SpeechRecognition) {
			alert("Trình duyệt của bạn không hỗ trợ tính năng nhận dạng giọng nói");
			return;
		}

		const recognition = new SpeechRecognition(); // Tạo một đối tượng nhận dạng giọng nói
		recognition.lang = 'vi-VN'; // Thiết lập ngôn ngữ là tiếng Việt

		recognition.onresult = function (event) {
			const transcript = event.results[0][0].transcript; // Lấy văn bản từ kết quả nhận dạng
			document.getElementById('messageInput').value = transcript; // Đưa văn bản vào thẻ input
			console.log(transcript);
		};

		recognition.start(); // Bắt đầu nhận dạng giọng nói từ microphone
	}
</script>@*Voice to text*@
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
	function toggleLeaveRequestForm() {
		const formContainer = document.getElementById('leaveRequestFormContainer');
		if (formContainer.style.display === 'none' || formContainer.style.display === '') {
			formContainer.style.display = 'block'; // Show the form
		} else {
			formContainer.style.display = 'none';  // Hide the form
		}
	}

	// Hàm để gán giá trị mặc định cho ngày bắt đầu và ngày kết thúc
	function setDefaultDates() {
		const today = new Date();
		const tomorrow = new Date(today);
		tomorrow.setDate(today.getDate() + 1); // Cộng thêm 1 ngày để lấy ngày mai

		// Định dạng ngày theo chuẩn yyyy-mm-dd
		const todayStr = today.toISOString().split('T')[0];
		const tomorrowStr = tomorrow.toISOString().split('T')[0];

		document.getElementById("StartDate").value = todayStr; // Đặt giá trị mặc định cho ngày bắt đầu
		document.getElementById("StartDate").setAttribute("min", todayStr); // Chặn các ngày trước hôm nay

		document.getElementById("EndDate").value = tomorrowStr; // Đặt giá trị mặc định cho ngày kết thúc (ngày mai)
		document.getElementById("EndDate").setAttribute("min", todayStr); // Chặn các ngày trước hôm nay
	}

	// Gọi hàm này khi trang được load để thiết lập giá trị mặc định ban đầu
	document.addEventListener("DOMContentLoaded", function () {
		setDefaultDates(); // Gán giá trị mặc định
	});

	// Đoạn mã để reset form và giữ lại ngày mặc định
	$('#leaveRequestForm').on('reset', function () {
		setTimeout(function () {
			setDefaultDates(); // Gán lại giá trị mặc định sau khi form được reset
		}, 0); // Đợi form reset xong, rồi mới gán lại giá trị
	});

	function submitLeaveRequest(event) {
		event.preventDefault();

		// Create FormData object
		const formData = new FormData();

		// Get form values and append to FormData
		formData.append('ClassRoomId', document.getElementById('ClassId').value);
		formData.append('UserID', document.getElementById('UserID').value);
		formData.append('StartDate', document.getElementById('StartDate').value);
		formData.append('EndDate', document.getElementById('EndDate').value);
		formData.append('Reasion', document.getElementById('Reason').value);

		const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

		// Use Axios to send a POST request with FormData
		axios.post('/LeaveRequests/Create', formData, {
			headers: {
				'RequestVerificationToken': token,
				'Content-Type': 'multipart/form-data' // Important for sending FormData
			}
		})
			.then(function (response) {
				if (response.data.success) {
					toastr.success('Gửi đơn thành công. Vui lòng đợi đơn được phê duyệt !', 'Thành công', { timeOut: 3000 })
					$('#leaveRequestForm')[0].reset();
					toggleLeaveRequestForm(); // Hide the form on success
					getAllLeaveRequests();
				}
			})
			.catch(function (error) {
				if (error.response && error.response.status === 400) {
					alert('Validation errors: ' + error.response.data.errors.join(', '));
				} else {
					alert('An error occurred: ' + error.message);
				}
			});
	}

	function getAllLeaveRequests() {
		const classId = document.getElementById('ClassId').value;
		const userId = document.getElementById('UserID').value;
		const isOwner = '@Model.isOwner';
		let params = { classId: classId, userId: userId, isOwner: isOwner }
		axios.get('/LeaveRequests/GetAllLeaveRequestByUserId', { params })
			.then(function (response) {
				const leaveRequests = response.data;
				const leaveRequestsContainer = document.getElementById('leaveRequestsList');
				leaveRequestsContainer.innerHTML = ''; // Clear previous data

				leaveRequests.forEach(request => {
					// Create a column wrapper for the card
					const col = document.createElement('div');
					col.classList.add('col-md-3', 'col-sm-6', 'mb-3'); // 4 cards per row on medium+ and 2 on small screens

					// Create the card and append it to the column
					const card = createLeaveRequestCard(request);
					col.appendChild(card);

					// Append the column (with the card) to the row container
					leaveRequestsContainer.appendChild(col);
				});
			})
			.catch(function (error) {
				console.error('An error occurred while fetching leave requests:', error);
			});
	}

	function createLeaveRequestCard(request) {
		const card = document.createElement('div');
		card.classList.add('card-letter',); // Ensure cards are equal height

		// Set the background color based on status
		if (request.status === 0) {
			card.style.backgroundColor = '#fff26a'; // Background color for status 0
		} else if (request.status === 1) {
			card.style.backgroundColor = '#76ff93'; // Background color for status 1
		} else if (request.status === -1) {
			card.style.backgroundColor = '#ff8c8c'; // Background color for status -1
		}

		const cardBody = document.createElement('div');
		cardBody.classList.add('card-body');
		let statusMessage;
		switch (request.status) {
			case 0:
				statusMessage = 'Đang chờ duyệt'; // Status 0
				break;
			case 1:
				statusMessage = 'Đã duyệt'; // Status 1
				break;
			case -1:
				statusMessage = 'Đã từ chối'; // Status -1
				break;
			default:
				statusMessage = 'Trạng thái không xác định'; // Fallback for undefined status
		}
		const isOwner = @Model.isOwner.ToString().ToLower(); // Chuyển đổi thành true/false
		const userId = @Html.Raw(Json.Serialize(Model.Owner.Id));
		const currentUserId = @Html.Raw(Json.Serialize(user.Id));

		if (isOwner) {
			cardBody.innerHTML = `
					<h5 class="card-title">Lý do: ${request.reasion}</h5>
					<p class="card-text">
						<strong>Họ và tên:</strong> ${request.name}<br/>
						<strong>Ngày bắt đầu:</strong> ${new Date(request.startDate).toLocaleDateString()}<br/>
						<strong>Ngày kết thúc:</strong> ${new Date(request.endDate).toLocaleDateString()}<br/>
						<strong>Trạng thái:</strong> ${statusMessage}<br/>
					</p>`;

			if (request.status === 0 && request.userID.trim() !== userId) {

				// Tạo button Duyệt
				const approveButton = document.createElement('button');
				approveButton.textContent = 'Duyệt';
				approveButton.classList.add('btn-duyet');
				approveButton.onclick = function () {
					updateLeaveRequestStatus(request.id, 1); // 1 cho "Đã duyệt"
				};

				// Tạo button Từ chối
				const rejectButton = document.createElement('button');
				rejectButton.textContent = 'Từ chối';
				rejectButton.classList.add('btn-tu-choi');
				rejectButton.onclick = function () {
					updateLeaveRequestStatus(request.id, -1); // -1 cho "Đã từ chối"
				};

				// Thêm các nút vào card body
				cardBody.appendChild(approveButton);
				cardBody.appendChild(rejectButton);

			}
		}
		else {
			cardBody.innerHTML = `
							<h5 class="card-title">Lý do: ${request.reasion}</h5>
							<p class="card-text">
								<strong>Ngày bắt đầu:</strong> ${new Date(request.startDate).toLocaleDateString()}<br/>
								<strong>Ngày kết thúc:</strong> ${new Date(request.endDate).toLocaleDateString()}<br/>
								<strong>Trạng thái:</strong> ${statusMessage}<br/>
							</p>`;
		}


		if (request.status === 0 && request.userID.trim() === currentUserId) {
			// Create a delete button
			const deleteButton = document.createElement('button');
			deleteButton.innerHTML = '&times;'; // This is the "X" character
			deleteButton.classList.add('delete-btn'); // Button styling and positioning
			deleteButton.onclick = function () {
				deleteLeaveRequest(request.id); // Pass the leave request ID to delete function
			};

			card.appendChild(deleteButton);
		}
		card.appendChild(cardBody);
		return card;
	}

	function updateLeaveRequestStatus(requestId, status) {
		axios.put('/LeaveRequests/UpdateStatus', { leaveRequestId: requestId, status: status })
			.then(response => {
				if (response.data.success) {
					toastr.success('Cập nhật trạng thái thành công!', 'Thành công', { timeOut: 3000 });
					getAllLeaveRequests();
				} else {
					toastr.error('Cập nhật trạng thái thất bại.', 'Gặp lỗi!')
					console.error('Có lỗi xảy ra:', response.data.errors);
				}
			})
			.catch(error => {
				if (error.response) {
					console.error('Có lỗi xảy ra khi gọi API:', error.response.data);
				} else {
					console.error('Có lỗi xảy ra:', error);
				}
			});
	}

	document.addEventListener('DOMContentLoaded', function () {
		getAllLeaveRequests(); // Call function when the page loads
	});

	function deleteLeaveRequest(id) {
		// Show a confirmation dialog before deleting
		const confirmation = confirm("Bạn có chắc chắn muốn xoá yêu cầu nghỉ phép này?");
		if (confirmation) {
			// Make an axios call to delete the leave request
			axios.delete(`/LeaveRequests/Delete/${id}`)
				.then(function (response) {
					// Refresh the leave requests list
					toastr.success('Xoá đơn thành công !', 'Thành công', { timeOut: 3000 });
					getAllLeaveRequests();
				})
				.catch(function (error) {
					console.error('An error occurred while deleting the leave request:', error);
				});
		}
	}


</script> @* Gửi đơn xin nghỉ phép*@
<script>
	function setupResumable(assignmentId) {
		const r = new Resumable({
			target: '/upload/UploadFileResumable',
			chunkSize: 1 * 1024 * 1024,  // 1MB
			simultaneousUploads: 3,
			testChunks: true,
			throttleProgressCallbacks: 1
		});

		r.assignBrowse(document.getElementById(`FileInput_${assignmentId}`));

		r.on('fileAdded', function (file) {
			document.getElementById(`uploadStatus_${assignmentId}`).textContent = 'Đang upload...';
			r.upload();  // Upload ngay khi file được thêm vào
		});

		r.on('fileProgress', function (file) {
			const progress = Math.floor(file.progress() * 100);
			document.getElementById(`uploadStatus_${assignmentId}`).textContent = `Đang upload: ${progress}%`;
		});

		r.on('fileSuccess', function (file, response) {
			const data = JSON.parse(response);
			document.getElementById(`uploadedFilePath`).value = data.filePath;
			document.getElementById(`uploadStatus_${assignmentId}`).textContent = "Upload thành công!";
		});

		r.on('fileError', function (file, message) {
			document.getElementById(`uploadStatus_${assignmentId}`).textContent = `Lỗi upload: ${message}`;
		});
	}

	function checkFileSize(input, maxFileSize) {
		const file = input.files[0]; // Lấy file đầu tiên người dùng chọn
		const max_size = maxFileSize * 1024 * 1024;
		if (file) {
			// Kiểm tra dung lượng file
			if (file.size > max_size) {
				alert("File quá lớn, vui lòng chọn file có dung lượng nhỏ hơn " + (max_size / (1024 * 1024)) + " MB.");
				input.value = ''; // Xóa giá trị của input nếu file vượt quá dung lượng
			}
		}
	}
</script> @* Nộp bt theo dung lượng*@
<script>
	// Gửi form chỉnh sửa qua AJAX
	$("#setting").on("click", "#saveButton_setting", function (e) {
		var form = $("#editClassRoomForm");
		e.preventDefault();
		// Gửi yêu cầu POST với dữ liệu form
		axios.post('/ClassRooms/Edit', new URLSearchParams(new FormData(form[0])).toString())
			.then(function (response) {
				// Kiểm tra kết quả trả về
				if (response.data.success) {
					toastr.success('Lưu thành công', 'Thành công', { timeOut: 3000 });
				} else {
					toastr.error('Lỗi trong quá trình lưu dữ liệu', 'Thất bại', { timeOut: 3000 });
				}
			})
			.catch(function (error) {
				// Xử lý lỗi nếu có
				toastr.error('Đã xảy ra lỗi khi gửi yêu cầu.', 'Thất bại', { timeOut: 3000 });
				console.error(error); // In chi tiết lỗi ra console để debug
			});
	});
</script>@*Gửi form chỉnh sửa class*@
<script>
	document.addEventListener('DOMContentLoaded', function () {
		const deleteButton = document.getElementById('confirmDeleteButton');
		const deleteForm = document.getElementById('deleteForm');

		// Khi nhấn nút xác nhận xóa
		deleteButton.addEventListener('click', function () {
			// Gửi form xóa khi xác nhận
			deleteForm.submit();
			// Hiển thị thông báo thành công
			toastr.success('Xoá lớp thành công !!!', 'Thành công', { timeOut: 3000 });
		});
	});
</script> @*Xoá lớp*@