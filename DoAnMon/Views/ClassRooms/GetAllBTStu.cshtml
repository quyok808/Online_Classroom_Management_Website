@using DoAnMon.IdentityCudtomUser
@using Microsoft.AspNetCore.Identity
@using System.Text
@inject UserManager<CustomUser> _userManager
@model IEnumerable<DoAnMon.Models.BaiNop>

@{
	ViewData["Title"] = "GetAllStu";
	Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
	.list-container{
		margin-top: 100px;
		width: 100%;
		height: 100%;
		font-family: 'Itim', serif;
	}

	.btn-download{
		background-color: white; /* Màu nền */
		color: rgb(74, 113, 255); /* Màu chữ */
		border-radius: 50%; /* Biến nút thành hình tròn */
		width: 50px; /* Chiều rộng */
		height: 50px; /* Chiều cao */
		display: flex; /* Để căn giữa icon */
		align-items: center; /* Căn giữa icon theo chiều dọc */
		justify-content: center; /* Căn giữa icon theo chiều ngang */
		float: right; /* Đẩy nút sang bên phải */
		transition: background-color 0.3s ease; /* Hiệu ứng hover */
		margin-right:20px;
		margin-top:10px;
		margin-bottom:20px;
	}

		.btn-download:hover {
			background-color: #eee; 
			color: rgb(23 0 255);
		}

	.btn-download .icon{
		font-size: 30px;  
	}

	.table {
		border: 1px solid #ddd;
		border-radius: 10px;
		overflow: hidden;
	}

		.table th {
			text-transform: uppercase;
			letter-spacing: 0.05em;
		}

		.table td, .table th {
			vertical-align: middle;
		}

		.table a {
			text-decoration: none;
			font-weight: bold;
		}

			.table a:hover {
				color: #007bff;
				text-decoration: underline;
			}

	.badge {
		font-size: 0.9em;
		padding: 5px 10px;
		border-radius: 5px;
	}

	.shadow-sm {
		box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
	}

	.form-control-sm {
		font-size: 0.8em;
		height: auto;
		padding: 5px;
	}

	.btn-sm {
		font-size: 0.85em;
		padding: 5px 10px;
		
	}

	.thead-dark th{
		background-color: rgb(74, 113, 255);
		color: white;
		text-align: center;
	}

</style>
<div class="list-container">
@{
	// Chuyển danh sách List<BaiNop> sang chuỗi JSON và mã hóa nó
	string baiNopJson = Newtonsoft.Json.JsonConvert.SerializeObject(Model);
	string baiNopBase64 = Convert.ToBase64String(Encoding.UTF8.GetBytes(baiNopJson));
}
	@{
		if (User.IsInRole("Teacher") || User.IsInRole("Admin"))
		{
			<a class="btn btn-download" asp-controller="ClassRooms" asp-action="DownloadFiles" asp-route-baiNop="@baiNopBase64"><i class="fa fa-download icon"></i></a>
			
		}
	}
	<table class="table table-hover table-bordered shadow-sm">
		<thead class="thead-dark">
			<tr>
				<th>Mã lớp</th>
				<th>Thời gian nộp</th>
				<th>Tên người nộp</th>
				<th>File nộp</th>
				<th>Điểm</th>
				<th>Thao tác</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in Model)
			{
				<tr style="text-align: justify; vertical-align: middle;">
					<td>@Html.DisplayFor(modelItem => item.ClassId)</td>
					<td>@Html.DisplayFor(modelItem => item.SubmittedAt)</td>
					<td>
						@{
							var user = await _userManager.FindByIdAsync(@item.UserId);
						}
						@user.Name
					</td>
					<td>
						<a href="/BAINOP/@item.Urlbainop" class="text-primary" download>@item.Urlbainop</a>
					</td>
					<td>
						<span id="displayLabel" class="badge bg-primary">@item.Diem</span>
					</td>
					<td>
						@if (User.IsInRole("Teacher") || User.IsInRole("Admin"))
						{
							<div class="d-flex justify-content-center align-items-center">
								<input type="number" id="editInput" class="form-control form-control-sm w-50 d-none" value="@item.Diem" />
								<button style="margin-top:10px;" class="btn btn-warning btn-sm mx-1" onclick="toggleEdit()" id="editButton">Chấm điểm</button>
								<button style="margin-top:10px;" class="btn btn-success btn-sm d-none mx-1" onclick="saveGrade('@item.IdBaiNop')" id="saveButton">Lưu</button>
							</div>
						}
					</td>
				</tr>
			}
		</tbody>
	</table>
	
</div>

<script>
	function toggleEdit() {
		var displayLabel = document.getElementById('displayLabel');
		var editInput = document.getElementById('editInput');
		var saveButton = document.getElementById('saveButton');
		var editButton = document.getElementById('editButton');

		if (displayLabel.style.display === 'none') {
			displayLabel.style.display = 'inline';
			editButton.style.display = 'inline';
			editInput.style.display = 'none';
			saveButton.style.display = 'none';
		} else {
			displayLabel.style.display = 'none';
			editButton.style.display = 'none';
			editInput.style.display = 'inline';
			saveButton.style.display = 'inline';
			editInput.value = displayLabel.textContent;
		}
	}

	function saveGrade(baiNopId) {
		var displayLabel = document.getElementById('displayLabel');
		var editInput = document.getElementById('editInput');
		var saveButton = document.getElementById('saveButton');
		var editButton = document.getElementById('editButton');

		displayLabel.textContent = editInput.value;
		displayLabel.style.display = 'inline';
		editInput.style.display = 'none';
		saveButton.style.display = 'none';
		editButton.style.display = 'inline';

		var diem = parseFloat(editInput.value); 
		if (diem < 0 || diem > 10 || isNaN(diem)) {
			alert("Điểm phải nằm trong khoảng từ 0 đến 10");
			return;
		}

		$.post("/ClassRooms/SaveGrade", { baiNopId: baiNopId, diem: diem }, function (data) {
			if (data.success) {
				alert("Đã lưu điểm thành công!");
			}
		});
	}

</script>